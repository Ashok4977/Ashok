name: Assign Release Conductor

on:
  pull_request:

jobs:
  assign-release-conductor:
    if: github.head_ref == 'changeset-release/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm ci
      - uses: ./.github/actions/pagerduty
        id: pagerduty
        with:
          schedule-id: 'P3IIVC4'
          token: ${{ secrets.PAGERDUTY_API_KEY_SID }}
      - run: echo ${{ steps.pagerduty.outputs.user }} is release conductor
      - name: Add user as assignee and reviewer
        uses: actions/github-script@v6
        env:
          RELEASE_CONDUCTOR: ${{ steps.pagerduty.outputs.user }}
          PREV_RELEASE_CONDUCTOR: ${{ steps.pagerduty.outputs.previous-schedule-user }}
        with:
          script: |
            const { RELEASE_CONDUCTOR, PREV_RELEASE_CONDUCTOR } = process.env;

            const { data: pull } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.pull.number,
            });

            // If the previous release conductor was added as an assignee, remove them
            const hasPreviousAssignee = pull.assignees.find((assignee) => {
              return assignee.login === PREV_RELEASE_CONDUCTOR;
            });

            if (hasPreviousAssignee) {
              await github.rest.issues.removeAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.pull.number,
                assignees: [PREV_RELEASE_CONDUCTOR],
              });
            }

            // If the previous release conductor was added as a reviewer, remove them
            const { data: requestedReviewers } = await github.rest.pulls.listRequestedReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const hasPreviousReviewer = requestedReviewers.users.find((user) => {
              return user.login === PREV_RELEASE_CONDUCTOR;
            });

            if (hasPreviousReviewer) {
              await github.rest.pulls.removeRequestedReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.pull.number,
                reviewers: [PREV_RELEASE_CONDUCTOR],
              });
            }

            // Add the current release conductor as an assignee if they are not currently assigned
            const hasAssignee = pull.assignees.find((assignee) => {
              return assignee.login === RELEASE_CONDUCTOR;
            });
            if (!hasAssignee) {
              await github.rest.issues.addAssignees({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                assignees: [RELEASE_CONDUCTOR]
              })
            }

            // Request the current release conductor as a reviewer if they are not currently requested
            const hasReviewer = requestedReviewers.users.find((user) => {
              return user.login === RELEASE_CONDUCTOR;
            });

            if (!hasReviewer) {
              await github.rest.pulls.requestReviewers({
                pull_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                reviewers: [RELEASE_CONDUCTOR]
              })
            }
