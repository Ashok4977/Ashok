[
  {
    "description": "",
    "name": "BaseStyles",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "whiteSpace",
        "type": "\"pre\" | \"normal\" | \"nowrap\" | \"pre-wrap\" | \"pre-line\"",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Caret",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "bg",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "borderColor",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "borderWidth",
        "type": "string | number",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "number",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "location",
        "type": "Location",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "theme",
        "type": "Theme",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Dialog.Header",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "narrow",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "wide",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onDismiss",
        "type": "() => void",
        "required": false,
        "description": "",
        "defaultValue": "() => null"
      },
      {
        "name": "isOpen",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "initialFocusRef",
        "type": "React.RefObject<HTMLElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "returnFocusRef",
        "type": "React.RefObject<HTMLElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Private component used to render placeholders in storybook and documentation examples",
    "name": "Placeholder",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "string | number",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "height",
        "type": "string | number",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "label",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Select",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "monospace",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "TextInputSizes",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "contrast",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "hasTrailingAction",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "isInputFocused",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SideNav.Link",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "aria-label",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"normal\" | \"lightweight\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "bordered",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ThemeProvider",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "theme",
        "type": "Theme",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "colorMode",
        "type": "ColorModeWithAuto",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "dayScheme",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "nightScheme",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "preventSSRMismatch",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "VisuallyHidden",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "isVisible",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Description",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "variant",
        "type": "\"inline\" | \"block\"",
        "required": false,
        "description": "Secondary text style variations.\n\n- `\"inline\"` - Secondary text is positioned beside primary text.\n- `\"block\"` - Secondary text is positioned below primary text.",
        "defaultValue": "inline"
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "name": "Divider",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Group",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "variant",
        "type": "\"subtle\" | \"filled\"",
        "required": false,
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "defaultValue": "subtle"
      },
      {
        "name": "title",
        "type": "string",
        "required": false,
        "description": "@deprecated (Use `ActionList.GroupHeading` instead. i.e. <ActionList.Group title=\"Group title\"> â†’ <ActionList.GroupHeading>Group title</ActionList.GroupHeading>)",
        "defaultValue": null
      },
      {
        "name": "auxiliaryText",
        "type": "string",
        "required": false,
        "description": "Secondary text which provides additional information about a `Group`.",
        "defaultValue": null
      },
      {
        "name": "role",
        "type": "AriaRole",
        "required": false,
        "description": "The ARIA role describing the function of the list inside `Group` component. `listbox` or `menu` are a common values.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
      },
      {
        "name": "selectionVariant",
        "type": "any",
        "required": false,
        "description": "Whether multiple Items or a single Item can be selected in the Group. Overrides value on ActionList root.",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Heading of  a `Group`.\n\nAs default, the role of ActionList is \"list\" and therefore group heading is rendered as a proper heading tag.\nIf the role is \"listbox\" or \"menu\" (ActionMenu), the group heading is rendered as a div with presentation role and it is\nhidden from the accessibility tree due to the limitation of listbox children. https://w3c.github.io/aria/#listbox\ngroups under menu or listbox are labelled by `aria-label`",
    "name": "GroupHeading",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "variant",
        "type": "\"subtle\" | \"filled\"",
        "required": false,
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "defaultValue": "subtle"
      },
      {
        "name": "auxiliaryText",
        "type": "string",
        "required": false,
        "description": "Secondary text which provides additional information about a `Group`.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
      },
      {
        "name": "visuallyHidden",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "_internalBackwardCompatibleTitle",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ActionList.Heading",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "as",
        "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 165 more ... | (\"h6\" & (ComponentClass<...> | FunctionComponent<...>))",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ActionList.Item",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "as",
        "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 161 more ... | FunctionComponent<...>",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "LinkItem",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "as",
        "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 161 more ... | FunctionComponent<...>",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ActionList",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "as",
        "type": "keyof IntrinsicElements",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Selection",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "selected",
        "type": "boolean",
        "required": false,
        "description": "Is the `Item` is currently selected?",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "LeadingVisualContainer",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "LeadingVisual",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TrailingVisual",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ActionMenu",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "children",
        "type": "any",
        "required": false,
        "description": "Recommended: `ActionMenu.Button` or `ActionMenu.Anchor` with `ActionMenu.Overlay`",
        "defaultValue": null
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjunction with `onOpenChange`.",
        "defaultValue": null
      },
      {
        "name": "onOpenChange",
        "type": "(s: boolean) => void",
        "required": false,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjunction with `open`.",
        "defaultValue": null
      },
      {
        "name": "anchorRef",
        "type": "any",
        "required": false,
        "description": "An override to the internal ref that will be spread on to the renderAnchor\nAn override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "An `AnchoredOverlay` provides an anchor that will open a floating overlay positioned relative to the anchor.\nThe overlay can be opened and navigated using keyboard or mouse.",
    "name": "AnchoredOverlay",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "open",
        "type": "boolean",
        "required": true,
        "description": "Determines whether the overlay portion of the component should be shown or not",
        "defaultValue": null
      },
      {
        "name": "onOpen",
        "type": "(gesture: \"anchor-click\" | \"anchor-key-press\", event?: React.KeyboardEvent<HTMLElement>) => unknown",
        "required": false,
        "description": "A callback which is called whenever the overlay is currently closed and an \"open gesture\" is detected.",
        "defaultValue": null
      },
      {
        "name": "onClose",
        "type": "(gesture: \"anchor-click\" | \"click-outside\" | \"escape\") => unknown",
        "required": false,
        "description": "A callback which is called whenever the overlay is currently open and a \"close gesture\" is detected.",
        "defaultValue": null
      },
      {
        "name": "overlayProps",
        "type": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"height\" | ... 7 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
        "required": false,
        "description": "Props to be spread on the internal `Overlay` component.",
        "defaultValue": null
      },
      {
        "name": "focusTrapSettings",
        "type": "Partial<FocusTrapHookSettings>",
        "required": false,
        "description": "Settings to apply to the Focus Zone on the internal `Overlay` component.",
        "defaultValue": null
      },
      {
        "name": "focusZoneSettings",
        "type": "Partial<FocusZoneHookSettings>",
        "required": false,
        "description": "Settings to apply to the Focus Zone on the internal `Overlay` component.",
        "defaultValue": null
      },
      {
        "name": "height",
        "type": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "renderAnchor",
        "type": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element",
        "required": true,
        "description": "A custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.\nA custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.",
        "defaultValue": null
      },
      {
        "name": "anchorRef",
        "type": "any",
        "required": false,
        "description": "An override to the internal ref that will be spread on to the renderAnchor\nAn override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.",
        "defaultValue": null
      },
      {
        "name": "anchorId",
        "type": "string",
        "required": false,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Autocomplete",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "AutocompleteMenu",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "addNewItem",
        "type": "Omit<ActionListItemProps, \"id\"> & { id: string; } & { leadingVisual?: React.FunctionComponent<React.PropsWithChildren<IconProps>>; text?: string; trailingVisual?: React.FunctionComponent<React.PropsWithChildren<IconProps>>; } & { ...; } & { ...; }",
        "required": false,
        "description": "A menu item that is used to allow users make a selection that is not available in the array passed to the `items` prop.\nThis menu item gets appended to the end of the list of options.",
        "defaultValue": null
      },
      {
        "name": "emptyStateText",
        "type": "any",
        "required": false,
        "description": "The text that appears in the menu when there are no options in the array passed to the `items` prop.",
        "defaultValue": null
      },
      {
        "name": "filterFn",
        "type": "(item: T, i: number) => boolean",
        "required": false,
        "description": "A custom function used to filter the options in the array passed to the `items` prop.\nBy default, we filter out items that don't match the value of the autocomplete text input. The default filter is not case-sensitive.",
        "defaultValue": null
      },
      {
        "name": "items",
        "type": "T[]",
        "required": true,
        "description": "The options for field values that are displayed in the dropdown menu.\nOne or more may be selected depending on the value of the `selectionVariant` prop.",
        "defaultValue": null
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "description": "Whether the data is loaded for the menu items",
        "defaultValue": null
      },
      {
        "name": "selectedItemIds",
        "type": "string[]",
        "required": true,
        "description": "The IDs of the selected items",
        "defaultValue": null
      },
      {
        "name": "sortOnCloseFn",
        "type": "(itemIdA: string, itemIdB: string) => number",
        "required": false,
        "description": "The sort function that is applied to the options in the array passed to the `items` prop after the user closes the menu.\nBy default, selected items are sorted to the top after the user closes the menu.",
        "defaultValue": null
      },
      {
        "name": "selectionVariant",
        "type": "\"multiple\" | \"single\"",
        "required": false,
        "description": "Whether there can be one item selected from the menu or multiple items selected from the menu",
        "defaultValue": null
      },
      {
        "name": "onOpenChange",
        "type": "(open: boolean) => void",
        "required": false,
        "description": "Function that gets called when the menu is opened or closed",
        "defaultValue": null
      },
      {
        "name": "onSelectedChange",
        "type": "OnSelectedChange<T>",
        "required": false,
        "description": "The function that is called when an item in the list is selected or deselected",
        "defaultValue": null
      },
      {
        "name": "customScrollContainerRef",
        "type": "React.MutableRefObject<HTMLElement>",
        "required": false,
        "description": "If the menu is rendered in a scrolling element other than the `Autocomplete.Overlay` component,\npass the ref of that element to `customScrollContainerRef` to ensure the container automatically\nscrolls when the user highlights an item in the menu that is outside the scroll container",
        "defaultValue": null
      },
      {
        "name": "aria-labelledby",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "AutocompleteOverlay",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "menuAnchorRef",
        "type": "React.RefObject<HTMLElement>",
        "required": false,
        "description": "The ref of the element that the position of the menu is based on. By default, the menu is positioned based on the text input",
        "defaultValue": null
      },
      {
        "name": "overlayProps",
        "type": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"height\" | ... 7 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
        "required": false,
        "description": "Props to be spread on the internal `Overlay` component.",
        "defaultValue": null
      },
      {
        "name": "height",
        "type": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "maxHeight",
        "type": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "maxWidth",
        "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "overflow",
        "type": "\"hidden\" | \"auto\" | \"visible\" | \"scroll\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "anchorSide",
        "type": "AnchorSide",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "ignoreClickRefs",
        "type": "React.RefObject<HTMLElement>[]",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "initialFocusRef",
        "type": "React.RefObject<HTMLElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "returnFocusRef",
        "type": "React.RefObject<HTMLElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onClickOutside",
        "type": "(e: TouchOrMouseEvent) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onEscape",
        "type": "(e: KeyboardEvent) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visibility",
        "type": "\"hidden\" | \"visible\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "data-test-id",
        "type": "unknown",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "position",
        "type": "React.CSSProperties",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "top",
        "type": "React.CSSProperties",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "left",
        "type": "React.CSSProperties",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "right",
        "type": "React.CSSProperties",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "bottom",
        "type": "React.CSSProperties",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "portalContainerName",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "preventFocusOnOpen",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "role",
        "type": "AriaRole",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "\"div\"",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Avatar",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "size",
        "type": "number | ResponsiveValue<number>",
        "required": false,
        "description": "Sets the width and height of the avatar.",
        "defaultValue": 20
      },
      {
        "name": "square",
        "type": "boolean",
        "required": false,
        "description": "Sets the shape of the avatar to a square if true. If false, the avatar will be circular.",
        "defaultValue": false
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "alt",
        "type": "string",
        "required": false,
        "description": "Provide alt text when the Avatar is used without the user's name next to it.",
        "defaultValue": ""
      },
      {
        "name": "src",
        "type": "string",
        "required": false,
        "description": "URL of the avatar image.",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "AvatarPair",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "AvatarStack",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "alignRight",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disableExpand",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "number | ResponsiveValue<number>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Blankslate",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "description": "Add a border around this component",
        "defaultValue": null
      },
      {
        "name": "narrow",
        "type": "boolean",
        "required": false,
        "description": "Constrain the maximum width of this component",
        "defaultValue": null
      },
      {
        "name": "spacious",
        "type": "boolean",
        "required": false,
        "description": "Increase the padding of this component",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Blankslate",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "border",
        "type": "boolean",
        "required": false,
        "description": "Add a border around this component",
        "defaultValue": null
      },
      {
        "name": "narrow",
        "type": "boolean",
        "required": false,
        "description": "Constrain the maximum width of this component",
        "defaultValue": null
      },
      {
        "name": "spacious",
        "type": "boolean",
        "required": false,
        "description": "Increase the padding of this component",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Box",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "BranchName",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Breadcrumbs",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "className",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Button",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "block",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "leadingVisual",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "trailingVisual",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "trailingAction",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ButtonGroup",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "An accessible, native checkbox component",
    "name": "Checkbox",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Apply inactive visual appearance to the checkbox",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "Indicates whether the checkbox must be checked",
        "defaultValue": null
      },
      {
        "name": "value",
        "type": "string | (string & readonly string[])",
        "required": false,
        "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which checkbox inputs are selected",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "Only used to inform ARIA attributes. Individual checkboxes do not have validation styles.",
        "defaultValue": null
      },
      {
        "name": "indeterminate",
        "type": "boolean",
        "required": false,
        "description": "Apply indeterminate visual appearance to the checkbox",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "CheckboxGroup",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "onChange",
        "type": "(selected: string[], e?: ChangeEvent<HTMLInputElement>) => void",
        "required": false,
        "description": "An onChange handler that gets called when any of the checkboxes change",
        "defaultValue": null
      },
      {
        "name": "aria-labelledby",
        "type": "string",
        "required": false,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether the input group allows user input",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "CircleBadge.Icon",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "inline",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "number",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"small\" | \"large\" | \"medium\"",
        "required": false,
        "description": "",
        "defaultValue": "medium"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "CircleOcticon",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "as",
        "type": "React.ElementType",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "number & ResponsiveValue<Height<TLengthStyledSystem>, Required<Theme<TLengthStyledSystem>>>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "icon",
        "type": "React.ComponentType<React.PropsWithChildren<{ size?: number | Size; }>>",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "This hook takes no parameters and returns an `async` function, `confirm`. When `confirm`\nis called, it shows the confirmation dialog. When the dialog is dismissed, a promise is\nresolved with `true` or `false` depending on whether or not the confirm button was used.",
    "name": "useConfirm",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "A ConfirmationDialog is a special kind of dialog with more rigid behavior. It\nis used to confirm a user action. ConfirmationDialogs always have exactly\ntwo buttons: one to cancel the action and one to confirm it. No custom\nrendering capabilities are provided for ConfirmationDialog.",
    "name": "ConfirmationDialog",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "onClose",
        "type": "(gesture: \"escape\" | \"confirm\" | \"close-button\" | \"cancel\") => void",
        "required": true,
        "description": "Required. This callback is invoked when a gesture to close the dialog\nis performed. The first argument indicates the gesture.",
        "defaultValue": null
      },
      {
        "name": "title",
        "type": "React.ReactNode",
        "required": true,
        "description": "Required. The title of the ConfirmationDialog. This is usually a brief\nquestion.",
        "defaultValue": null
      },
      {
        "name": "cancelButtonContent",
        "type": "React.ReactNode",
        "required": false,
        "description": "The text to use for the cancel button. Default: \"Cancel\".",
        "defaultValue": null
      },
      {
        "name": "confirmButtonContent",
        "type": "React.ReactNode",
        "required": false,
        "description": "The text to use for the confirm button. Default: \"OK\".",
        "defaultValue": null
      },
      {
        "name": "confirmButtonType",
        "type": "\"normal\" | \"danger\" | \"primary\"",
        "required": false,
        "description": "The type of button to use for the confirm button. Default: Button.",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "CounterLabel",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "id": "data_table",
    "description": "The `table` element where all columns and rows are rendered.",
    "name": "DataTable",
    "status": "draft",
    "a11yReviewed": false,
    "stories": [
      "drafts-components-datatable-features--with-title",
      "drafts-components-datatable-features--with-title-and-subtitle",
      "drafts-components-datatable-features--with-sorting",
      "drafts-components-datatable-features--with-actions",
      "drafts-components-datatable-features--with-action",
      "drafts-components-datatable-features--with-row-action",
      "drafts-components-datatable-features--with-row-actions",
      "drafts-components-datatable-features--with-row-action-menu",
      "drafts-components-datatable-features--with-custom-heading",
      "drafts-components-datatable-features--with-no-content",
      "drafts-components-datatable-features--with-loading",
      "drafts-components-datatable-features--with-pagination"
    ],
    "props": [
      {
        "name": "aria-describedby",
        "type": "string",
        "required": false,
        "description": "Provide an id to an element which uniquely describes this table",
        "defaultValue": null
      },
      {
        "name": "aria-labelledby",
        "type": "string",
        "required": false,
        "description": "Provide an id to an element which uniquely labels this table",
        "defaultValue": null
      },
      {
        "name": "cellPadding",
        "type": "\"normal\" | \"condensed\" | \"spacious\"",
        "required": false,
        "description": "Specify the amount of space that should be available around the contents of\na cell",
        "defaultValue": null
      },
      {
        "name": "data",
        "type": "Data[]",
        "required": true,
        "description": "Provide a collection of the rows which will be rendered inside of the table",
        "defaultValue": null
      },
      {
        "name": "columns",
        "type": "Column<Data>[]",
        "required": true,
        "description": "Provide the columns for the table and the fields in `data` to which they\ncorrespond",
        "defaultValue": null
      },
      {
        "name": "initialSortColumn",
        "type": "string | number",
        "required": false,
        "description": "Provide the id or field of the column by which the table is sorted. When\nusing this `prop`, the input data must be sorted by this column in\nascending order",
        "defaultValue": null
      },
      {
        "name": "initialSortDirection",
        "type": "\"ASC\" | \"DESC\"",
        "required": false,
        "description": "Provide the sort direction that the table should be sorted by on the\ncurrently sorted column",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Details",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "A dialog is a type of overlay that can be used for confirming actions, asking\nfor disambiguation, and presenting small forms. They generally allow the user\nto focus on a quick task without having to navigate to a different page.\n\nDialogs appear in the page after a direct user interaction. Don't show dialogs\non page load or as system alerts.\n\nDialogs appear centered in the page, with a visible backdrop that dims the rest\nof the window for focus.\n\nAll dialogs have a title and a close button.\n\nDialogs are modal. Dialogs can be dismissed by clicking on the close button,\npressing the escape key, or by interacting with another button in the dialog.\nTo avoid losing information and missing important messages, clicking outside\nof the dialog will not close it.\n\nThe sub components provided (e.g. Header, Title, etc.) are available for custom\nrenderers only. They are not intended to be used otherwise.",
    "name": "Dialog",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "title",
        "type": "React.ReactNode",
        "required": false,
        "description": "Title of the Dialog. Also serves as the aria-label for this Dialog.",
        "defaultValue": null
      },
      {
        "name": "subtitle",
        "type": "React.ReactNode",
        "required": false,
        "description": "The Dialog's subtitle. Optional. Rendered below the title in smaller\ntype with less contrast. Also serves as the aria-describedby for this\nDialog.",
        "defaultValue": null
      },
      {
        "name": "renderHeader",
        "type": "React.FunctionComponent<React.PropsWithChildren<DialogHeaderProps>>",
        "required": false,
        "description": "Provide a custom renderer for the dialog header. This content is\nrendered directly into the dialog body area, full bleed from edge\nto edge, top to the start of the body element.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "defaultValue": null
      },
      {
        "name": "renderBody",
        "type": "React.FunctionComponent<React.PropsWithChildren<DialogProps>>",
        "required": false,
        "description": "Provide a custom render function for the dialog body. This content is\nrendered directly into the dialog body area, full bleed from edge to\nedge, header to footer.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "defaultValue": null
      },
      {
        "name": "renderFooter",
        "type": "React.FunctionComponent<React.PropsWithChildren<DialogProps>>",
        "required": false,
        "description": "Provide a custom render function for the dialog footer. This content is\nrendered directly into the dialog footer area, full bleed from edge to\nedge, end of the body element to bottom.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "defaultValue": null
      },
      {
        "name": "footerButtons",
        "type": "DialogButtonProps[]",
        "required": false,
        "description": "Specifies the buttons to be rendered in the Dialog footer.",
        "defaultValue": null
      },
      {
        "name": "onClose",
        "type": "(gesture: \"escape\" | \"close-button\") => void",
        "required": true,
        "description": "This method is invoked when a gesture to close the dialog is used (either\nan Escape key press or clicking the \"X\" in the top-right corner). The\ngesture argument indicates the gesture that was used to close the dialog\n(either 'close-button' or 'escape').",
        "defaultValue": null
      },
      {
        "name": "role",
        "type": "\"dialog\" | \"alertdialog\"",
        "required": false,
        "description": "Default: \"dialog\". The ARIA role to assign to this dialog.\n@see https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal\n@see https://www.w3.org/TR/wai-aria-practices-1.1/#alertdialog",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\"",
        "required": false,
        "description": "The width of the dialog.\nsmall: 296px\nmedium: 320px\nlarge: 480px\nxlarge: 640px",
        "defaultValue": null
      },
      {
        "name": "height",
        "type": "\"small\" | \"large\" | \"auto\"",
        "required": false,
        "description": "The height of the dialog.\nsmall: 296x480\nlarge: 480x640\nauto: variable based on contents",
        "defaultValue": null
      },
      {
        "name": "position",
        "type": "\"center\" | \"left\" | \"right\" | ResponsiveValue<\"center\" | \"left\" | \"right\" | \"bottom\" | \"fullscreen\">",
        "required": false,
        "description": "The position of the dialog",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FilteredActionList",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": false
      },
      {
        "name": "placeholderText",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "filterValue",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onFilterChange",
        "type": "(value: string, e: React.ChangeEvent<HTMLInputElement>) => void",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "textInputProps",
        "type": "Partial<Omit<TextInputProps, \"onChange\">>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "inputRef",
        "type": "React.RefObject<HTMLInputElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "groupMetadata",
        "type": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: ({ header, items, ...props }: GroupProps) => Element; }, \"items\">) & { ...; })[]",
        "required": false,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "defaultValue": null
      },
      {
        "name": "items",
        "type": "ItemInput[]",
        "required": true,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "defaultValue": null
      },
      {
        "name": "role",
        "type": "AriaRole",
        "required": false,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "id to attach to the base DOM node of the list",
        "defaultValue": null
      },
      {
        "name": "renderItem",
        "type": "RenderItemFn",
        "required": false,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "defaultValue": null
      },
      {
        "name": "renderGroup",
        "type": "({ header, items, ...props }: GroupProps) => Element",
        "required": false,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"inset\" | \"full\"",
        "required": false,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`â€™s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "defaultValue": null
      },
      {
        "name": "selectionVariant",
        "type": "\"multiple\" | \"single\"",
        "required": false,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "defaultValue": null
      },
      {
        "name": "showItemDividers",
        "type": "boolean",
        "required": false,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FormControl",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether the control allows user input",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "The unique identifier for this control. Used to associate the label, validation text, and caption text",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "defaultValue": null
      },
      {
        "name": "layout",
        "type": "\"horizontal\" | \"vertical\"",
        "required": false,
        "description": "The direction the content flows.\nVertical layout is used by default, and horizontal layout is used for checkbox and radio inputs.",
        "defaultValue": "vertical"
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FormControlCaption",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "This is the private/internal interface for subcomponents of `FormControl`.",
    "name": "useFormControlContext",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Make any component compatible with `FormControl`'s automatic wiring up of accessibility attributes & validation by\nreading the props from this hook and merging them with the passed-in props. If used outside of `FormControl`, this\nhook has no effect.\nMake any component compatible with `FormControl`'s automatic wiring up of accessibility attributes & validation by\nreading the props from this hook and handling them / assigning them to the underlying form control. If used outside\nof `FormControl`, this hook has no effect.",
    "name": "useFormControlForwardedProps",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FormControlContextProvider",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FormControlLabel",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "htmlFor",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visuallyHidden",
        "type": "boolean",
        "required": false,
        "description": "Whether the label should be visually hidden",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "\"label\" | \"legend\" | \"span\"",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FormControlLeadingVisual",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FormControlValidation",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "variant",
        "type": "FormValidationStatus",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Header.Item",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Hidden",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "when",
        "type": "Viewport | Viewport[]",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Hidden",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "when",
        "type": "Viewport | Viewport[]",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "LabelGroup",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "overflowStyle",
        "type": "\"inline\" | \"overlay\"",
        "required": false,
        "description": "How hidden tokens should be shown. `'inline'` shows the hidden tokens after the visible tokens. `'overlay'` shows all tokens in an overlay that appears on top of the visible tokens.",
        "defaultValue": "overlay"
      },
      {
        "name": "visibleChildCount",
        "type": "number | \"auto\"",
        "required": false,
        "description": "How many tokens to show. `'auto'` truncates the tokens to fit in the parent container. Passing a number will truncate after that number tokens. If this is undefined, tokens will never be truncated.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "NavList",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Octicon",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "color",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "icon",
        "type": "React.ElementType",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "StyledOverlay",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "height",
        "type": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "maxHeight",
        "type": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "maxWidth",
        "type": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visibility",
        "type": "\"hidden\" | \"visible\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "overflow",
        "type": "\"hidden\" | \"auto\" | \"visible\" | \"scroll\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "anchorSide",
        "type": "AnchorSide",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "PageHeader",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "aria-label",
        "type": "React.AriaAttributes",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": "h2"
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "PageLayout",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "containerWidth",
        "type": "\"large\" | \"medium\" | \"full\" | \"xlarge\"",
        "required": false,
        "description": "The maximum width of the page container",
        "defaultValue": "xlarge"
      },
      {
        "name": "padding",
        "type": "\"normal\" | \"none\" | \"condensed\"",
        "required": false,
        "description": "The spacing between the outer edges of the page container and the viewport",
        "defaultValue": "none"
      },
      {
        "name": "rowGap",
        "type": "\"normal\" | \"none\" | \"condensed\"",
        "required": false,
        "description": "",
        "defaultValue": "normal"
      },
      {
        "name": "columnGap",
        "type": "\"normal\" | \"none\" | \"condensed\"",
        "required": false,
        "description": "",
        "defaultValue": "normal"
      },
      {
        "name": "_slotsConfig",
        "type": "Record<\"footer\" | \"header\", React.ElementType>",
        "required": false,
        "description": "Private prop to allow SplitPageLayout to customize slot components",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Pagehead",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Pagination",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "theme",
        "type": "Record<string, unknown>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "pageCount",
        "type": "number",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "currentPage",
        "type": "number",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onPageChange",
        "type": "(e: React.MouseEvent, n: number) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "hrefBuilder",
        "type": "(n: number) => string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "marginPageCount",
        "type": "number",
        "required": false,
        "description": "",
        "defaultValue": 1
      },
      {
        "name": "showPages",
        "type": "boolean | ResponsiveValue<boolean>",
        "required": false,
        "description": "",
        "defaultValue": true
      },
      {
        "name": "surroundingPageCount",
        "type": "number",
        "required": false,
        "description": "",
        "defaultValue": 2
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "PointerBox",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "caret",
        "type": "Location",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "bg",
        "type": "string & ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
        "required": false,
        "description": "The color utility parses a component's `color` and `bg` props and converts them into CSS declarations.\nBy default the raw value of the prop is returned.\n\nColor palettes can be configured with the ThemeProvider to use keys as prop values, with support for dot notation.\nArray values are converted into responsive values.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)",
        "defaultValue": null
      },
      {
        "name": "borderColor",
        "type": "string & ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>",
        "required": false,
        "description": "The border-color shorthand CSS property sets the color of all sides of an element's border.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)",
        "defaultValue": null
      },
      {
        "name": "border",
        "type": "(string | number) & ResponsiveValue<Border<TLengthStyledSystem>, Required<Theme<TLengthStyledSystem>>>",
        "required": false,
        "description": "The border CSS property sets an element's border. It's a shorthand for border-width, border-style,\nand border-color.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border)",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject & { bg?: string; backgroundColor?: string; borderColor?: string; }",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Popover.Content",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "caret",
        "type": "CaretPosition",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "relative",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Register a container to serve as a portal root.",
    "name": "registerPortalRoot",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Creates a React Portal, placing all children in a separate physical DOM root node.",
    "name": "Portal",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "onMount",
        "type": "() => void",
        "required": false,
        "description": "Called when this portal is added to the DOM",
        "defaultValue": null
      },
      {
        "name": "containerName",
        "type": "string",
        "required": false,
        "description": "Optional. Mount this portal at the container specified\nby this name. The container must be previously registered\nwith `registerPortal`.",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ProgressBar.Item",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "progress",
        "type": "string | number",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "An accessible, native radio component for selecting one option from a list.",
    "name": "Radio",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "Name attribute of the input element. Required for grouping radio inputs",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Apply inactive visual appearance to the radio button",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "Indicates whether the radio button must be checked before the form can be submitted",
        "defaultValue": null
      },
      {
        "name": "value",
        "type": "string | (string & readonly string[])",
        "required": false,
        "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which radio button in a group is selected",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "Only used to inform ARIA attributes. Individual radio inputs do not have validation styles.",
        "defaultValue": null
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": "Indicates whether the radio button is selected",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "RadioGroup",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "onChange",
        "type": "(selected: string, e?: ChangeEvent<HTMLInputElement>) => void",
        "required": false,
        "description": "An onChange handler that gets called when the selection changes",
        "defaultValue": null
      },
      {
        "name": "name",
        "type": "string",
        "required": true,
        "description": "The name used to identify this group of radios",
        "defaultValue": null
      },
      {
        "name": "aria-labelledby",
        "type": "string",
        "required": false,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether the input group allows user input",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "RelativeTime",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "date",
        "type": "Date",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onRelativeTimeUpdated",
        "type": "(event: RelativeTimeUpdatedEvent) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "second",
        "type": "\"numeric\" | \"2-digit\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "minute",
        "type": "\"numeric\" | \"2-digit\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "hour",
        "type": "\"numeric\" | \"2-digit\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "weekday",
        "type": "\"narrow\" | \"short\" | \"long\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "day",
        "type": "\"numeric\" | \"2-digit\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "month",
        "type": "\"numeric\" | \"narrow\" | \"2-digit\" | \"short\" | \"long\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "year",
        "type": "\"numeric\" | \"2-digit\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "timeZoneName",
        "type": "\"short\" | \"long\" | \"shortOffset\" | \"longOffset\" | \"shortGeneric\" | \"longGeneric\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "threshold",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "tense",
        "type": "Tense",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "precision",
        "type": "\"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"week\" | \"millisecond\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "format",
        "type": "Format",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "formatStyle",
        "type": "FormatStyle",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "datetime",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "connectedCallback",
        "type": "() => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disconnectedCallback",
        "type": "() => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "attributeChangedCallback",
        "type": "(attrName: string, oldValue: unknown, newValue: unknown) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "update",
        "type": "() => void",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SegmentedControl",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "aria-label",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "aria-labelledby",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "aria-describedby",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "fullWidth",
        "type": "boolean | ResponsiveValue<boolean>",
        "required": false,
        "description": "Whether the control fills the width of its parent",
        "defaultValue": null
      },
      {
        "name": "onChange",
        "type": "(selectedIndex: number) => void",
        "required": false,
        "description": "The handler that gets called when a segment is selected",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "\"small\" | \"medium\"",
        "required": false,
        "description": "The size of the buttons",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"default\" | Partial<Record<WidthOnlyViewportRangeKeys, \"default\" | \"hideLabels\" | \"dropdown\">>",
        "required": false,
        "description": "Configure alternative ways to render the control when it gets rendered in tight spaces",
        "defaultValue": "default"
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SegmentedControlButton",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "children",
        "type": "string & ReactNode",
        "required": false,
        "description": "The visible label rendered in the button",
        "defaultValue": null
      },
      {
        "name": "selected",
        "type": "boolean",
        "required": false,
        "description": "Whether the segment is selected. This is used for controlled `SegmentedControls`, and needs to be updated using the `onChange` handler on `SegmentedControl`.",
        "defaultValue": null
      },
      {
        "name": "defaultSelected",
        "type": "boolean",
        "required": false,
        "description": "Whether the segment is selected. This is used for uncontrolled `SegmentedControls` to pick one `SegmentedControlButton` that is selected on the initial render.",
        "defaultValue": null
      },
      {
        "name": "leadingIcon",
        "type": "React.FunctionComponent<React.PropsWithChildren<IconProps>>",
        "required": false,
        "description": "The leading icon comes before item label",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SegmentedControlIconButton",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "aria-label",
        "type": "string",
        "required": false,
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "defaultValue": null
      },
      {
        "name": "icon",
        "type": "React.FunctionComponent<React.PropsWithChildren<IconProps>>",
        "required": true,
        "description": "The icon that represents the segmented control item",
        "defaultValue": null
      },
      {
        "name": "selected",
        "type": "boolean",
        "required": false,
        "description": "Whether the segment is selected. This is used for controlled SegmentedControls, and needs to be updated using the onChange handler on SegmentedControl.",
        "defaultValue": null
      },
      {
        "name": "defaultSelected",
        "type": "boolean",
        "required": false,
        "description": "Whether the segment is selected. This is used for uncontrolled SegmentedControls to pick one SegmentedControlButton that is selected on the initial render.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Select",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "monospace",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "TextInputSizes",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "contrast",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "hasTrailingAction",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "isInputFocused",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SelectPanel",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "title",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": "isMultiSelectVariant(selected) ? 'Select items' : 'Select an item'"
      },
      {
        "name": "subtitle",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onOpenChange",
        "type": "(open: boolean, gesture: \"anchor-click\" | \"anchor-key-press\" | \"click-outside\" | \"escape\" | \"selection\") => void",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "inputLabel",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": "Filter items"
      },
      {
        "name": "overlayProps",
        "type": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"height\" | ... 7 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "footer",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "id to attach to the base DOM node of the list",
        "defaultValue": null
      },
      {
        "name": "role",
        "type": "AriaRole",
        "required": false,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"inset\" | \"full\"",
        "required": false,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`â€™s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "defaultValue": null
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "items",
        "type": "ItemInput[]",
        "required": true,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "defaultValue": null
      },
      {
        "name": "renderItem",
        "type": "RenderItemFn",
        "required": false,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "defaultValue": null
      },
      {
        "name": "renderGroup",
        "type": "({ header, items, ...props }: GroupProps) => Element",
        "required": false,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "defaultValue": null
      },
      {
        "name": "showItemDividers",
        "type": "boolean",
        "required": false,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "defaultValue": null
      },
      {
        "name": "groupMetadata",
        "type": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: ({ header, items, ...props }: GroupProps) => Element; }, \"items\">) & { ...; })[]",
        "required": false,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "defaultValue": null
      },
      {
        "name": "placeholderText",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": "Filter items"
      },
      {
        "name": "filterValue",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onFilterChange",
        "type": "(value: string, e: React.ChangeEvent<HTMLInputElement>) => void",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "textInputProps",
        "type": "Partial<Omit<TextInputProps, \"onChange\">>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "inputRef",
        "type": "React.RefObject<HTMLInputElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "open",
        "type": "boolean",
        "required": true,
        "description": "Determines whether the overlay portion of the component should be shown or not",
        "defaultValue": null
      },
      {
        "name": "renderAnchor",
        "type": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element",
        "required": false,
        "description": "A custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.\nA custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.",
        "defaultValue": "props => {\n    const {children, ...rest} = props\n    return (\n      <Button trailingAction={TriangleDownIcon} {...rest}>\n        {children}\n      </Button>\n    )\n  }"
      },
      {
        "name": "anchorRef",
        "type": "any",
        "required": false,
        "description": "An override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.\nAn override to the internal ref that will be spread on to the renderAnchor",
        "defaultValue": null
      },
      {
        "name": "anchorId",
        "type": "string",
        "required": false,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "defaultValue": null
      },
      {
        "name": "selected",
        "type": "ItemInput | ItemInput[]",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onSelectedChange",
        "type": "((selected: ItemInput) => void) | ((selected: ItemInput[]) => void)",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Spinner",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "size",
        "type": "\"small\" | \"large\" | \"medium\"",
        "required": false,
        "description": "Sets the width and height of the spinner.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SplitPageLayout",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "StateLabel",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "status",
        "type": "\"issueClosed\" | \"issueClosedNotPlanned\" | \"pullClosed\" | \"pullMerged\" | \"pullQueued\" | \"issueOpened\" | \"pullOpened\" | \"draft\" | \"issueDraft\" | \"unavailable\"",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"small\" | \"normal\"",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SubNav.Link",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "actions",
        "type": "React.ReactNode",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "align",
        "type": "\"right\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "full",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "label",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TabNav.Link",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TestComponentWithForwardRef",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "The name of the thing",
        "defaultValue": "Mona"
      },
      {
        "name": "color",
        "type": "\"blue\" | \"green\" | \"red\"",
        "required": false,
        "description": "The color of the thing",
        "defaultValue": "blue"
      },
      {
        "name": "metadata",
        "type": "{ age: number; location: string; }",
        "required": false,
        "description": "Metadata about the thing",
        "defaultValue": null
      },
      {
        "name": "order",
        "type": "number",
        "required": false,
        "description": "The order of the thing",
        "defaultValue": 0
      },
      {
        "name": "isReal",
        "type": "boolean",
        "required": false,
        "description": "Whether the thing is real",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TestComponent",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "The name of the thing",
        "defaultValue": "Mona"
      },
      {
        "name": "color",
        "type": "\"blue\" | \"green\" | \"red\"",
        "required": false,
        "description": "The color of the thing",
        "defaultValue": "blue"
      },
      {
        "name": "metadata",
        "type": "{ age: number; location: string; }",
        "required": false,
        "description": "Metadata about the thing",
        "defaultValue": null
      },
      {
        "name": "order",
        "type": "number",
        "required": false,
        "description": "The order of the thing",
        "defaultValue": 0
      },
      {
        "name": "isReal",
        "type": "boolean",
        "required": false,
        "description": "Whether the thing is real",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Text",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "whiteSpace",
        "type": "\"pre\" | \"normal\" | \"nowrap\" | \"pre-wrap\" | \"pre-line\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TextInput",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "as",
        "type": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 161 more ... | FunctionComponent<...>",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TextInputWithTokens",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "An accessible, native textarea component that supports validation states.\nThis component accepts all native HTML <textarea> attributes as props.",
    "name": "Textarea",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Apply inactive visual appearance to the Textarea",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "Indicates whether the Textarea validation state",
        "defaultValue": null
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Block",
        "defaultValue": null
      },
      {
        "name": "resize",
        "type": "\"none\" | \"both\" | \"horizontal\" | \"vertical\"",
        "required": false,
        "description": "Allows resizing of the textarea",
        "defaultValue": "both"
      },
      {
        "name": "contrast",
        "type": "boolean",
        "required": false,
        "description": "apply a high contrast color to background",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Timeline.Item",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "clipSidebar",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ToggleSwitch",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "defaultChecked",
        "type": "boolean",
        "required": false,
        "description": "Uncontrolled - whether the switch is turned on",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether the switch is ready for user input",
        "defaultValue": null
      },
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "description": "Whether the switch's value is being calculated",
        "defaultValue": null
      },
      {
        "name": "checked",
        "type": "boolean",
        "required": false,
        "description": "Whether the switch is turned on",
        "defaultValue": null
      },
      {
        "name": "onChange",
        "type": "(checked: boolean) => void",
        "required": false,
        "description": "The callback that is called when the switch is toggled on or off",
        "defaultValue": null
      },
      {
        "name": "onClick",
        "type": "MouseEventHandler",
        "required": false,
        "description": "The callback that is called when the switch is clicked",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "\"small\" | \"medium\"",
        "required": false,
        "description": "Size of the switch",
        "defaultValue": null
      },
      {
        "name": "statusLabelPosition",
        "type": "CellAlignment",
        "required": false,
        "description": "Whether the \"on\" and \"off\" labels should appear before or after the switch.\n**This should only be changed when the switch's alignment needs to be adjusted.** For example: It needs to be left-aligned because the label appears above it and the caption appears below it.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "isTokenInteractive",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether or not the token is disabled (non-interactive).",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "\"a\" | \"button\" | \"span\"",
        "required": false,
        "description": "",
        "defaultValue": "span"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "RemoveTokenButton",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "size",
        "type": "TokenSizeKeys",
        "required": false,
        "description": "",
        "defaultValue": "medium"
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "borderOffset",
        "type": "number",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "isParentInteractive",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TokenTextContainer",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "text",
        "type": "React.ReactNode",
        "required": false,
        "description": "The text label inside the token",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "A unique identifier that can be associated with the token",
        "defaultValue": null
      },
      {
        "name": "size",
        "type": "TokenSizeKeys",
        "required": false,
        "description": "Which size the token will be rendered at",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether or not the token is disabled (non-interactive).",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "undefined",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onRemove",
        "type": "() => void",
        "required": false,
        "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
        "defaultValue": null
      },
      {
        "name": "hideRemoveButton",
        "type": "boolean",
        "required": false,
        "description": "Whether the remove button should be rendered in the token",
        "defaultValue": null
      },
      {
        "name": "isSelected",
        "type": "boolean",
        "required": false,
        "description": "Whether the token is selected",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Tooltip",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "direction",
        "type": "\"s\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\" | \"nw\"",
        "required": false,
        "description": "",
        "defaultValue": "n"
      },
      {
        "name": "text",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "noDelay",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "align",
        "type": "\"left\" | \"right\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "wrap",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Tooltip",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "direction",
        "type": "TooltipDirection",
        "required": false,
        "description": "The direction of the tooltip in relation to the trigger",
        "defaultValue": "s"
      },
      {
        "name": "text",
        "type": "string",
        "required": true,
        "description": "Text in the tooltip",
        "defaultValue": null
      },
      {
        "name": "type",
        "type": "\"label\" | \"description\"",
        "required": false,
        "description": "Whether the tooltip content is used to label the trigger (like IconButton), or describe the trigger (most other uses)",
        "defaultValue": "description"
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TreeView",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "aria-label",
        "type": "React.AriaAttributes",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "aria-labelledby",
        "type": "React.AriaAttributes",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "flat",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "LoadingCounter",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "UnderlineNav",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "UnderlineNavItem",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "as",
        "type": "any",
        "required": false,
        "description": "Renders `UnderlineNav.Item` as given component i.e. react-router's Link",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ActionMenu.Item",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "anchorContent",
        "type": "React.ReactNode",
        "required": false,
        "description": "Content that is passed into the renderAnchor component, which is a button by default.",
        "defaultValue": null
      },
      {
        "name": "onAction",
        "type": "(props: ItemProps, event?: any) => void",
        "required": false,
        "description": "A callback that triggers both on clicks and keyboard events. This callback will be overridden by item level `onAction` callbacks.",
        "defaultValue": null
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjuction with `setOpen`.",
        "defaultValue": null
      },
      {
        "name": "setOpen",
        "type": "(s: boolean) => void",
        "required": false,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjuction with `open`.",
        "defaultValue": null
      },
      {
        "name": "overlayProps",
        "type": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"height\" | ... 7 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>",
        "required": false,
        "description": "Props to be spread on the internal `Overlay` component.",
        "defaultValue": null
      },
      {
        "name": "groupMetadata",
        "type": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: ({ header, items, ...props }: GroupProps) => Element; }, \"items\">) & { ...; })[]",
        "required": false,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "defaultValue": null
      },
      {
        "name": "items",
        "type": "ItemInput[]",
        "required": true,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "defaultValue": null
      },
      {
        "name": "role",
        "type": "AriaRole",
        "required": false,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "id to attach to the base DOM node of the list",
        "defaultValue": null
      },
      {
        "name": "renderItem",
        "type": "RenderItemFn",
        "required": false,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "defaultValue": null
      },
      {
        "name": "renderGroup",
        "type": "({ header, items, ...props }: GroupProps) => Element",
        "required": false,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"inset\" | \"full\"",
        "required": false,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`â€™s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "defaultValue": null
      },
      {
        "name": "selectionVariant",
        "type": "\"multiple\" | \"single\"",
        "required": false,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "defaultValue": null
      },
      {
        "name": "showItemDividers",
        "type": "boolean",
        "required": false,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "defaultValue": null
      },
      {
        "name": "renderAnchor",
        "type": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element",
        "required": false,
        "description": "A custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.\nA custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.",
        "defaultValue": "<T extends ButtonProps>(props: T) => <Button {...props} />"
      },
      {
        "name": "anchorRef",
        "type": "any",
        "required": false,
        "description": "An override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.\nAn override to the internal ref that will be spread on to the renderAnchor",
        "defaultValue": null
      },
      {
        "name": "anchorId",
        "type": "string",
        "required": false,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "useDetails",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "ref",
        "type": "RefObject<HTMLDetailsElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "closeOnOutsideClick",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "defaultOpen",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onClickOutside",
        "type": "(event: MouseEvent) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "`useMedia` will use the given `mediaQueryString` with `matchMedia` to\ndetermine if the document matches the media query string.\n\nIf `MatchMedia` is used as an ancestor, `useMedia` will instead use the\nvalue of the media query string, if available",
    "name": "useMedia",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Use `MatchMedia` to emulate media conditions by passing in feature\nqueries to the `features` prop. If a component uses `useMedia` with the\nfeature passed in to `MatchMedia` it will force its value to match what is\nprovided to `MatchMedia`\n\nThis should be used for development and documentation only in situations\nwhere devtools cannot emulate this feature",
    "name": "MatchMedia",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "features",
        "type": "MediaQueryFeatures",
        "required": false,
        "description": "",
        "defaultValue": "{}"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "useOnOutsideClick",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "containerRef",
        "type": "any",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "ignoreClickRefs",
        "type": "React.RefObject<HTMLElement>[]",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onClickOutside",
        "type": "(e: TouchOrMouseEvent) => void",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "useOverlay",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "ignoreClickRefs",
        "type": "RefObject<HTMLElement>[]",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "initialFocusRef",
        "type": "RefObject<HTMLElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "returnFocusRef",
        "type": "RefObject<HTMLElement>",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onEscape",
        "type": "(e: KeyboardEvent) => void",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onClickOutside",
        "type": "(e: TouchOrMouseEvent) => void",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "overlayRef",
        "type": "RefObject<HTMLDivElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "preventFocusOnOpen",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "getTextInputArgTypes",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "getFormControlArgsByChildComponent",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether the control allows user input",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visuallyHidden",
        "type": "boolean",
        "required": false,
        "description": "Whether the label should be visually hidden",
        "defaultValue": null
      },
      {
        "name": "htmlFor",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "labelChildren",
        "type": "React.ReactNode",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "captionChildren",
        "type": "React.ReactNode",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "FormValidationStatus",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "validationChildren",
        "type": "React.ReactNode",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "isNumeric",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SSRProvider",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "useSSRSafeId",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "getTextInputArgTypes",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "getFormControlArgsByChildComponent",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether the control allows user input",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visuallyHidden",
        "type": "boolean",
        "required": false,
        "description": "Whether the label should be visually hidden",
        "defaultValue": null
      },
      {
        "name": "htmlFor",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "labelChildren",
        "type": "React.ReactNode",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "captionChildren",
        "type": "React.ReactNode",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "FormValidationStatus",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "validationChildren",
        "type": "React.ReactNode",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "OcticonArgType",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Render the component (a React.createElement() or JSX expression)\ninto its intermediate object representation with 'type',\n'props', and 'children' keys\n\nThe returned object can be matched with expect().toEqual(), e.g.\n\n```js\nexpect(render(<Foo />)).toEqual(render(<div foo='bar' />))\n```",
    "name": "render",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Render the component (a React.createElement() or JSX expression)\nusing react-test-renderer and return the root node\n```",
    "name": "renderRoot",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Get the HTML class names rendered by the component instance\nas an array.\n\n```js\nexpect(renderClasses(<div className='a b' />))\n  .toEqual(['a', 'b'])\n```",
    "name": "renderClasses",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Returns true if a node renders with a single class.",
    "name": "rendersClass",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "px",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "percent",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "renderStyles",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "getComputedStyles",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "This provides a layer of compatibility between the render() function from\nreact-test-renderer and Enzyme's mount()",
    "name": "getProps",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "getClassName",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "getClasses",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "loadCSS",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "unloadCSS",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "behavesAsComponent",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "Component",
        "type": "React.ComponentType<React.PropsWithChildren<any>>",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "toRender",
        "type": "() => React.ReactElement",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "options",
        "type": "Options",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "name": "Divider",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "name": "Divider.renderItem",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "StyledDivider",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Collects related `Items` in an `ActionList`.",
    "name": "Group",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "header",
        "type": "HeaderProps",
        "required": false,
        "description": "Props for a `Header` to render in the `Group`.",
        "defaultValue": null
      },
      {
        "name": "groupId",
        "type": "string",
        "required": false,
        "description": "The id of the group.",
        "defaultValue": null
      },
      {
        "name": "items",
        "type": "Element[]",
        "required": false,
        "description": "`Items` to render in the `Group`.",
        "defaultValue": null
      },
      {
        "name": "showItemDividers",
        "type": "boolean",
        "required": false,
        "description": "Whether to display a divider above each `Item` in this `Group` when it does not follow a `Header` or `Divider`.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Displays the name and description of a `Group`.",
    "name": "Header",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "variant",
        "type": "\"subtle\" | \"filled\"",
        "required": false,
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "defaultValue": "subtle"
      },
      {
        "name": "title",
        "type": "string",
        "required": true,
        "description": "Primary text which names a `Group`.",
        "defaultValue": null
      },
      {
        "name": "auxiliaryText",
        "type": "string",
        "required": false,
        "description": "Secondary text which provides additional information about a `Group`.",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "StyledHeader",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"subtle\" | \"filled\"",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ActionList.Item",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "dangerouslySetInnerHtml",
        "type": "React.DOMAttributes<HTMLDivElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Lists `Item`s, either grouped or ungrouped, with a `Divider` between each `Group`.",
    "name": "ActionList",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "groupMetadata",
        "type": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: ({ header, items, ...props }: GroupProps) => Element; }, \"items\">) & { ...; })[]",
        "required": true,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "defaultValue": null
      },
      {
        "name": "items",
        "type": "ItemInput[] | ((ItemProps | (Partial<ItemProps> & { renderItem: RenderItemFn; })) & { groupId: string; })[]",
        "required": true,
        "description": "A collection of `Item` props, plus associated group identifiers\nand `Item`-level custom `Item` renderers.\nA collection of `Item` props and `Item`-level custom `Item` renderers.",
        "defaultValue": null
      },
      {
        "name": "role",
        "type": "AriaRole",
        "required": false,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "id to attach to the base DOM node of the list",
        "defaultValue": null
      },
      {
        "name": "renderItem",
        "type": "RenderItemFn",
        "required": false,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "defaultValue": null
      },
      {
        "name": "renderGroup",
        "type": "({ header, items, ...props }: GroupProps) => Element",
        "required": false,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"inset\" | \"full\"",
        "required": false,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`â€™s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "defaultValue": null
      },
      {
        "name": "selectionVariant",
        "type": "\"multiple\" | \"single\"",
        "required": false,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "defaultValue": null
      },
      {
        "name": "showItemDividers",
        "type": "boolean",
        "required": false,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Button",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"small\" | \"large\" | \"medium\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "undefined",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ButtonBase",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "variant",
        "type": "\"small\" | \"large\" | \"medium\"",
        "required": false,
        "description": "",
        "defaultValue": "medium"
      },
      {
        "name": "as",
        "type": "undefined",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ButtonClose",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ButtonDanger",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"small\" | \"large\" | \"medium\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "undefined",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ButtonInvisible",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"small\" | \"large\" | \"medium\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "undefined",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ButtonOutline",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"small\" | \"large\" | \"medium\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "undefined",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ButtonPrimary",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"small\" | \"large\" | \"medium\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "undefined",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ButtonTableList",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FilterList.Item",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "FilteredSearch",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "UnderlineNav.Link",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "actions",
        "type": "React.ReactNode",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "align",
        "type": "\"right\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "full",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "label",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "createslots",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ActionBar",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "size",
        "type": "Size",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "aria-label",
        "type": "React.AriaAttributes",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ActionBarIconButton",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Shows suggestions to complete the current word/phrase the user is actively typing.",
    "name": "InlineAutocomplete",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "Renders an overlayed list at the given relative coordinates. Handles keyboard navigation\nand accessibility concerns.",
    "name": "SuggestionList",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "suggestions",
        "type": "Suggestions",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "portalName",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "triggerCharCoords",
        "type": "CharacterCoordinates",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onClose",
        "type": "() => void",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onCommit",
        "type": "(suggestion: string) => void",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "inputRef",
        "type": "React.RefObject<TextInputElement>",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visible",
        "type": "boolean",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "tabInsertsSuggestions",
        "type": "boolean",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "defaultPlacement",
        "type": "SuggestionsPlacement",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "MarkdownEditor.Actions",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "MarkdownEditor.Footer",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "MarkdownEditor.Label",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visuallyHidden",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Markdown textarea with controls & keyboard shortcuts.",
    "name": "MarkdownEditor",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "value",
        "type": "string",
        "required": true,
        "description": "Current value of the editor as a multiline markdown string.",
        "defaultValue": null
      },
      {
        "name": "onChange",
        "type": "(newMarkdown: string) => void",
        "required": true,
        "description": "Called when the value changes.",
        "defaultValue": null
      },
      {
        "name": "onRenderPreview",
        "type": "(markdown: string) => Promise<string>",
        "required": true,
        "description": "Accepts Markdown and returns rendered HTML. To prevent XSS attacks,\nthe HTML should be sanitized and/or come from a trusted source.",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Disable the editor and all related buttons. Users can still switch between preview & edit modes.",
        "defaultValue": false
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "Placeholder text to show when the editor is empty. By default, no placeholder will be shown.",
        "defaultValue": null
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": "Maximum number of characters the markdown can hold (includes formatting characters like `*`).",
        "defaultValue": null
      },
      {
        "name": "fullHeight",
        "type": "boolean",
        "required": false,
        "description": "Force the editor to take up the full height of the container and disallow resizing. Only\nuse when the container height is tall enough that the user will never want to expand the\ninput further, ie when it takes the full height of the viewport.",
        "defaultValue": null
      },
      {
        "name": "aria-describedby",
        "type": "string",
        "required": false,
        "description": "ID of the describing element.",
        "defaultValue": null
      },
      {
        "name": "viewMode",
        "type": "MarkdownViewMode",
        "required": false,
        "description": "Optionally control the view mode. If uncontrolled, leave this `undefined`.",
        "defaultValue": null
      },
      {
        "name": "onChangeViewMode",
        "type": "(newViewMode: MarkdownViewMode) => void",
        "required": false,
        "description": "If `viewMode` is controlled, this will be called on change.",
        "defaultValue": null
      },
      {
        "name": "onPrimaryAction",
        "type": "() => void",
        "required": false,
        "description": "Called when the user presses `Ctrl`/`Cmd` + `Enter`. Should almost always be wired to\nthe same event as clicking the primary `actionButton`.",
        "defaultValue": null
      },
      {
        "name": "minHeightLines",
        "type": "number",
        "required": false,
        "description": "Minimum number of visible lines of text in the editor.",
        "defaultValue": 5
      },
      {
        "name": "maxHeightLines",
        "type": "number",
        "required": false,
        "description": "Maximum number of visible lines of text in the editor. Has no effect if `fullHeight = true`.",
        "defaultValue": 35
      },
      {
        "name": "emojiSuggestions",
        "type": "SuggestionOptions<Emoji>",
        "required": false,
        "description": "Array of all possible emojis to suggest. Leave `undefined` to disable emoji autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
        "defaultValue": null
      },
      {
        "name": "mentionSuggestions",
        "type": "SuggestionOptions<Mentionable>",
        "required": false,
        "description": "Array of all possible mention suggestions. Leave `undefined` to disable `@`-mention autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
        "defaultValue": null
      },
      {
        "name": "referenceSuggestions",
        "type": "SuggestionOptions<Reference>",
        "required": false,
        "description": "Array of all possible references to suggest. Leave `undefined` to disable `#`-reference autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
        "defaultValue": null
      },
      {
        "name": "onUploadFile",
        "type": "(file: File) => Promise<FileUploadResult>",
        "required": false,
        "description": "Uploads a file to a hosting service and returns the URL. If not provided, file uploads\nwill be disabled.",
        "defaultValue": null
      },
      {
        "name": "acceptedFileTypes",
        "type": "FileType[]",
        "required": false,
        "description": "Array of allowed file types. If `onUploadFile` is defined but this array is not, all\nfile types will be accepted. You can still reject file types by rejecting the `onUploadFile`\npromise, but setting this array provides a better user experience by preventing the\nupload in the first place.",
        "defaultValue": null
      },
      {
        "name": "monospace",
        "type": "boolean",
        "required": false,
        "description": "Control whether the editor font is monospace.",
        "defaultValue": false
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "Control whether the input is required.",
        "defaultValue": false
      },
      {
        "name": "name",
        "type": "string",
        "required": false,
        "description": "The name that will be given to the `textarea`.",
        "defaultValue": null
      },
      {
        "name": "savedReplies",
        "type": "SavedReply[]",
        "required": false,
        "description": "To enable the saved replies feature, provide an array of replies.",
        "defaultValue": null
      },
      {
        "name": "pasteUrlsAsPlainText",
        "type": "boolean",
        "required": false,
        "description": "Control whether URLs are pasted as plain text instead of as formatted links (if the\nuser has selected some text before pasting). Defaults to `false` (URLs will paste as\nlinks). This should typically be controlled by user settings.\n\nUsers can always toggle this behavior by holding `shift` when pasting.",
        "defaultValue": false
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "MarkdownEditor.DefaultToolbarButtons",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ErrorMessage",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "message",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Renders an invisible `markdown-toolbar-element` that provides formatting actions to the\neditor. This is a hacky way of using the library, but it allows us to use the built-in\nbehavior without having to actually display the inflexible toolbar element. It also means\nwe can still use the formatting tools even if the consumer hides the default toolbar\nbuttons (ie, by keyboard shortcut).",
    "name": "FormattingTools",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "forInputId",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "MarkdownInput",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onChange",
        "type": "React.ChangeEventHandler<HTMLTextAreaElement>",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onKeyDown",
        "type": "React.KeyboardEventHandler<HTMLTextAreaElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Apply inactive visual appearance to the Textarea",
        "defaultValue": null
      },
      {
        "name": "placeholder",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "maxLength",
        "type": "number",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "fullHeight",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "isDraggedOver",
        "type": "boolean",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "emojiSuggestions",
        "type": "SuggestionOptions<Emoji>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "mentionSuggestions",
        "type": "SuggestionOptions<Mentionable>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "referenceSuggestions",
        "type": "SuggestionOptions<Reference>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "minHeightLines",
        "type": "number",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "maxHeightLines",
        "type": "number",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "monospace",
        "type": "boolean",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "pasteUrlsAsPlainText",
        "type": "boolean",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visible",
        "type": "boolean",
        "required": true,
        "description": "Use this prop to control visibility instead of unmounting, so the undo stack and custom height are preserved.",
        "defaultValue": null
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "Block",
        "defaultValue": null
      },
      {
        "name": "resize",
        "type": "\"none\" | \"both\" | \"horizontal\" | \"vertical\"",
        "required": false,
        "description": "Allows resizing of the textarea",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "contrast",
        "type": "boolean",
        "required": false,
        "description": "apply a high contrast color to background",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "Indicates whether the Textarea validation state",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "MarkdownEditor.ToolbarButton",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ViewSwitch",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "selectedView",
        "type": "MarkdownViewMode",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onViewSelect",
        "type": "(view: MarkdownViewMode) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onLoadPreview",
        "type": "() => void",
        "required": true,
        "description": "Called when the preview should be loaded.",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "MarkdownViewer",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "loading",
        "type": "boolean",
        "required": false,
        "description": "Show a loading spinner instead of content.",
        "defaultValue": false
      },
      {
        "name": "dangerousRenderedHTML",
        "type": "{ __html: string | TrustedHTML; }",
        "required": true,
        "description": "Set the rendered HTML of the viewer. To prevent XSS, ensure that the source of this\nHTML is trusted!",
        "defaultValue": null
      },
      {
        "name": "onLinkClick",
        "type": "(event: MouseEvent) => void",
        "required": false,
        "description": "Called when the user clicks a link element. This can be used to intercept the click\nand provide custom routing. Note that this is a native HTML `MouseEvent` and not a\n`React.ClickEvent`.",
        "defaultValue": null
      },
      {
        "name": "openLinksInNewTab",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": false
      },
      {
        "name": "markdownValue",
        "type": "string",
        "required": false,
        "description": "The markdown the HTML was rendered from. This is not used for viewing, only as a source\nfor change events.",
        "defaultValue": ""
      },
      {
        "name": "onChange",
        "type": "(markdown: string) => void | Promise<void>",
        "required": false,
        "description": "Called when the user interacts and updates the Markdown. The rendered Markdown is\nupdated eagerly - if the request fails, a rejected Promise should be returned by\nthis handler. In that case, the viewer will revert the visual change.\n\nIf the change is handled by an async API request (as it typically will be in production\ncode), the viewer should be `disabled` while the request is pending to avoid conflicts.\nTo allow users to check multiple boxes rapidly, the API request should be debounced (an\nideal debounce duration is about 1 second).",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Control whether interaction is disabled.",
        "defaultValue": false
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SelectPanel",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "title",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "description",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"anchored\" | \"modal\" | ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">",
        "required": false,
        "description": "",
        "defaultValue": "warning"
      },
      {
        "name": "selectionVariant",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": "multiple"
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "defaultOpen",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": false
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "anchorRef",
        "type": "React.RefObject<HTMLButtonElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onCancel",
        "type": "() => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onClearSelection",
        "type": "() => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onSubmit",
        "type": "(event?: React.FormEvent<HTMLFormElement>) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
        "required": false,
        "description": "",
        "defaultValue": "medium"
      },
      {
        "name": "height",
        "type": "\"fit-content\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "maxHeight",
        "type": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xlarge\"",
        "required": false,
        "description": "",
        "defaultValue": "large"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "SelectPanel",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "title",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "description",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "variant",
        "type": "\"anchored\" | \"modal\" | ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">",
        "required": false,
        "description": "",
        "defaultValue": "warning"
      },
      {
        "name": "selectionVariant",
        "type": "any",
        "required": false,
        "description": "",
        "defaultValue": "multiple"
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "defaultOpen",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": false
      },
      {
        "name": "open",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "anchorRef",
        "type": "React.RefObject<HTMLButtonElement>",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onCancel",
        "type": "() => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onClearSelection",
        "type": "() => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "onSubmit",
        "type": "(event?: React.FormEvent<HTMLFormElement>) => void",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "width",
        "type": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\"",
        "required": false,
        "description": "",
        "defaultValue": "medium"
      },
      {
        "name": "height",
        "type": "\"fit-content\"",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "maxHeight",
        "type": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xlarge\"",
        "required": false,
        "description": "",
        "defaultValue": "large"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TabPanels.Tab",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "aria-label",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "aria-labelledby",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Alert",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "politeness",
        "type": "\"assertive\" | \"polite\"",
        "required": false,
        "description": "The politeness level to use for the announcement",
        "defaultValue": "polite"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "`Announce` is a component that will announce the text content of the\n`children` passed in to screen readers using the given politeness level. It\nwill also announce any changes to the text content of `children`",
    "name": "Announce",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "politeness",
        "type": "\"assertive\" | \"polite\"",
        "required": false,
        "description": "The politeness level to use for the announcement",
        "defaultValue": "polite"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Provides an unstyled button that can be styled as-needed for components",
    "name": "Button",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ConditionalWrapper",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "if",
        "type": "boolean",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "InputCaption",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "id",
        "type": "string",
        "required": true,
        "description": "The unique identifier used to associate the caption with an input",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether the input associated with this caption is disabled",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "InputLabel",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "visuallyHidden",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "htmlFor",
        "type": "string",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "as",
        "type": "\"label\" | \"legend\" | \"span\"",
        "required": false,
        "description": "",
        "defaultValue": "label"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "InputValidation",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "id",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "LiveRegion",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Message",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "value",
        "type": "string",
        "required": true,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ScrollableRegion",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "Status",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "politeness",
        "type": "\"assertive\" | \"polite\"",
        "required": false,
        "description": "The politeness level to use for the announcement",
        "defaultValue": "polite"
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TextInputInnerAction",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TextInputInnerVisualSlot",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "hasLoadingIndicator",
        "type": "boolean",
        "required": true,
        "description": "Whether the input is expected to ever show a loading indicator",
        "defaultValue": null
      },
      {
        "name": "showLoadingIndicator",
        "type": "boolean",
        "required": true,
        "description": "Whether the to show the loading indicator",
        "defaultValue": null
      },
      {
        "name": "visualPosition",
        "type": "\"leading\" | \"trailing\"",
        "required": true,
        "description": "Which side of this visual is being rendered",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TextInputBaseWrapper",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "monospace",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "contrast",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "hasTrailingAction",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "isInputFocused",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "TextInputWrapper",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "block",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "contrast",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "hasTrailingAction",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "isInputFocused",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "monospace",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "validationStatus",
        "type": "FormValidationStatus",
        "required": false,
        "description": "",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "UnstyledTextInput",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "ValidationAnimationContainer",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "show",
        "type": "boolean",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "Provides a component that implements the \"visually hidden\" technique. This is\nanalagous to the common `sr-only` class. Children that are rendered inside\nthis component will not be visible but will be available to screen readers.\n\nNote: if this component, or a descendant, has focus then this component will\nno longer be visually hidden.",
    "name": "VisuallyHidden",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "useEmojiSuggestions",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "useMentionSuggestions",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "useReferenceSuggestions",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "CheckboxOrRadioGroup",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "aria-labelledby",
        "type": "string",
        "required": false,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "defaultValue": null
      },
      {
        "name": "disabled",
        "type": "boolean",
        "required": false,
        "description": "Whether the input group allows user input",
        "defaultValue": false
      },
      {
        "name": "id",
        "type": "string",
        "required": false,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "defaultValue": null
      },
      {
        "name": "required",
        "type": "boolean",
        "required": false,
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "defaultValue": false
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "CheckboxOrRadioGroupCaption",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "CheckboxOrRadioGroupLabel",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "visuallyHidden",
        "type": "boolean",
        "required": false,
        "description": "Whether to visually hide the fieldset legend",
        "defaultValue": false
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  },
  {
    "description": "",
    "name": "CheckboxOrRadioGroupValidation",
    "a11yReviewed": false,
    "stories": [
      ""
    ],
    "props": [
      {
        "name": "variant",
        "type": "FormValidationStatus",
        "required": true,
        "description": "Changes the visual style to match the validation status",
        "defaultValue": null
      },
      {
        "name": "sx",
        "type": "BetterSystemStyleObject",
        "required": false,
        "description": "",
        "defaultValue": null
      }
    ],
    "subcomponents": []
  }
]