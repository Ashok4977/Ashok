[
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/BaseStyles.tsx",
    "description": "",
    "displayName": "BaseStyles",
    "methods": [],
    "props": {
      "whiteSpace": {
        "defaultValue": null,
        "description": "",
        "name": "whiteSpace",
        "parent": {
          "fileName": "react/packages/react/src/constants.ts",
          "name": "SystemTypographyProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/constants.ts",
            "name": "SystemTypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"pre\" | \"normal\" | \"nowrap\" | \"pre-wrap\" | \"pre-line\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Caret.tsx",
    "description": "",
    "displayName": "Caret",
    "methods": [],
    "props": {
      "bg": {
        "defaultValue": null,
        "description": "",
        "name": "bg",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "borderColor": {
        "defaultValue": null,
        "description": "",
        "name": "borderColor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "borderWidth": {
        "defaultValue": null,
        "description": "",
        "name": "borderWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "location": {
        "defaultValue": null,
        "description": "",
        "name": "location",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Location"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Caret.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Theme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog.tsx",
    "description": "",
    "displayName": "Dialog.Header",
    "methods": [],
    "props": {
      "narrow": {
        "defaultValue": null,
        "description": "",
        "name": "narrow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "wide": {
        "defaultValue": null,
        "description": "",
        "name": "wide",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "onDismiss": {
        "defaultValue": {
          "value": "() => null"
        },
        "description": "",
        "name": "onDismiss",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "isOpen": {
        "defaultValue": null,
        "description": "",
        "name": "isOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "initialFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLElement>"
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "returnFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Placeholder.tsx",
    "description": "Private component used to render placeholders in storybook and documentation examples",
    "displayName": "Placeholder",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Placeholder.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Placeholder.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Placeholder.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string | number"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Placeholder.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Select.tsx",
    "description": "",
    "displayName": "Select",
    "methods": [],
    "props": {
      "monospace": {
        "defaultValue": null,
        "description": "",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "block": {
        "defaultValue": null,
        "description": "",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "TextInputSizes"
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "SelectHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "SelectHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hasTrailingAction": {
        "defaultValue": null,
        "description": "",
        "name": "hasTrailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isInputFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isInputFocused",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "",
        "name": "placeholder",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Use [NavList](https://primer.style/react/NavList) instead"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SideNav.tsx",
    "description": "",
    "displayName": "SideNav.Link",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"normal\" | \"lightweight\""
        }
      },
      "bordered": {
        "defaultValue": null,
        "description": "",
        "name": "bordered",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SideNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ThemeProvider.tsx",
    "description": "",
    "displayName": "ThemeProvider",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Theme"
        }
      },
      "colorMode": {
        "defaultValue": null,
        "description": "",
        "name": "colorMode",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorModeWithAuto"
        }
      },
      "dayScheme": {
        "defaultValue": null,
        "description": "",
        "name": "dayScheme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nightScheme": {
        "defaultValue": null,
        "description": "",
        "name": "nightScheme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "preventSSRMismatch": {
        "defaultValue": null,
        "description": "",
        "name": "preventSSRMismatch",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ThemeProvider.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/_VisuallyHidden.tsx",
    "description": "",
    "displayName": "VisuallyHidden",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "isVisible": {
        "defaultValue": null,
        "description": "",
        "name": "isVisible",
        "parent": {
          "fileName": "react/packages/react/src/_VisuallyHidden.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/_VisuallyHidden.tsx",
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Description.tsx",
    "description": "",
    "displayName": "Description",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "inline"
        },
        "description": "Secondary text style variations.\n\n- `\"inline\"` - Secondary text is positioned beside primary text.\n- `\"block\"` - Secondary text is positioned below primary text.",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Description.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inline\" | \"block\""
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Divider.tsx",
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Group.tsx",
    "description": "",
    "displayName": "Group",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "subtle"
        },
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"subtle\" | \"filled\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "@deprecated (Use `ActionList.GroupHeading` instead. i.e. <ActionList.Group title=\"Group title\"> → <ActionList.GroupHeading>Group title</ActionList.GroupHeading>)",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "auxiliaryText": {
        "defaultValue": null,
        "description": "Secondary text which provides additional information about a `Group`.",
        "name": "auxiliaryText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of the list inside `Group` component. `listbox` or `menu` are a common values.",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "sx": {
        "defaultValue": {
          "value": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "Whether multiple Items or a single Item can be selected in the Group. Overrides value on ActionList root.",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Group.tsx",
    "description": "Heading of  a `Group`.\n\nAs default, the role of ActionList is \"list\" and therefore group heading is rendered as a proper heading tag.\nIf the role is \"listbox\" or \"menu\" (ActionMenu), the group heading is rendered as a div with presentation role and it is\nhidden from the accessibility tree due to the limitation of listbox children. https://w3c.github.io/aria/#listbox\ngroups under menu or listbox are labelled by `aria-label`",
    "displayName": "GroupHeading",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "subtle"
        },
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"subtle\" | \"filled\""
        }
      },
      "auxiliaryText": {
        "defaultValue": null,
        "description": "Secondary text which provides additional information about a `Group`.",
        "name": "auxiliaryText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": {
          "value": "__DEV__\n  ? Object.freeze<BetterSystemStyleObject>({})\n  : {}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\""
        }
      },
      "_internalBackwardCompatibleTitle": {
        "defaultValue": null,
        "description": "",
        "name": "_internalBackwardCompatibleTitle",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/Group.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Heading.tsx",
    "description": "",
    "displayName": "ActionList.Heading",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/ActionList/Heading.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 165 more ... | (\"h6\" & (ComponentClass<...> | FunctionComponent<...>))"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Item.tsx",
    "description": "",
    "displayName": "ActionList.Item",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 161 more ... | FunctionComponent<...>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/LinkItem.tsx",
    "description": "",
    "displayName": "LinkItem",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 161 more ... | FunctionComponent<...>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/List.tsx",
    "description": "",
    "displayName": "ActionList",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "keyof IntrinsicElements"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Selection.tsx",
    "description": "",
    "displayName": "Selection",
    "methods": [],
    "props": {
      "selected": {
        "defaultValue": null,
        "description": "Is the `Item` is currently selected?",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionList/shared.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Visuals.tsx",
    "description": "",
    "displayName": "LeadingVisualContainer",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Visuals.tsx",
    "description": "",
    "displayName": "LeadingVisual",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionList/Visuals.tsx",
    "description": "",
    "displayName": "TrailingVisual",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ActionMenu/ActionMenu.tsx",
    "description": "",
    "displayName": "ActionMenu",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Recommended: `ActionMenu.Button` or `ActionMenu.Anchor` with `ActionMenu.Overlay`",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjunction with `onOpenChange`.",
        "name": "open",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onOpenChange": {
        "defaultValue": null,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjunction with `open`.",
        "name": "onOpenChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ActionMenu/ActionMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(s: boolean) => void"
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "An override to the internal ref that will be spread on to the renderAnchor\nAn override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.",
        "name": "anchorRef",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
    "description": "An `AnchoredOverlay` provides an anchor that will open a floating overlay positioned relative to the anchor.\nThe overlay can be opened and navigated using keyboard or mouse.",
    "displayName": "AnchoredOverlay",
    "methods": [],
    "props": {
      "open": {
        "defaultValue": null,
        "description": "Determines whether the overlay portion of the component should be shown or not",
        "name": "open",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "A callback which is called whenever the overlay is currently closed and an \"open gesture\" is detected.",
        "name": "onOpen",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(gesture: \"anchor-click\" | \"anchor-key-press\", event?: React.KeyboardEvent<HTMLElement>) => unknown"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "A callback which is called whenever the overlay is currently open and a \"close gesture\" is detected.",
        "name": "onClose",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(gesture: \"anchor-click\" | \"click-outside\" | \"escape\") => unknown"
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "Props to be spread on the internal `Overlay` component.",
        "name": "overlayProps",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"height\" | ... 7 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>"
        }
      },
      "focusTrapSettings": {
        "defaultValue": null,
        "description": "Settings to apply to the Focus Zone on the internal `Overlay` component.",
        "name": "focusTrapSettings",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<FocusTrapHookSettings>"
        }
      },
      "focusZoneSettings": {
        "defaultValue": null,
        "description": "Settings to apply to the Focus Zone on the internal `Overlay` component.",
        "name": "focusZoneSettings",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<FocusZoneHookSettings>"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\""
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\""
        }
      },
      "renderAnchor": {
        "defaultValue": null,
        "description": "A custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.\nA custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.",
        "name": "renderAnchor",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          }
        ],
        "required": true,
        "type": {
          "name": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element"
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "An override to the internal ref that will be spread on to the renderAnchor\nAn override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.",
        "name": "anchorRef",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "anchorId": {
        "defaultValue": null,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "name": "anchorId",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Autocomplete/Autocomplete.tsx",
    "description": "",
    "displayName": "Autocomplete",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/Autocomplete.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
    "description": "",
    "displayName": "AutocompleteMenu",
    "methods": [],
    "props": {
      "addNewItem": {
        "defaultValue": null,
        "description": "A menu item that is used to allow users make a selection that is not available in the array passed to the `items` prop.\nThis menu item gets appended to the end of the list of options.",
        "name": "addNewItem",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Omit<ActionListItemProps, \"id\"> & { id: string; } & { leadingVisual?: React.FunctionComponent<React.PropsWithChildren<IconProps>>; text?: string; trailingVisual?: React.FunctionComponent<React.PropsWithChildren<IconProps>>; } & { ...; } & { ...; }"
        }
      },
      "emptyStateText": {
        "defaultValue": null,
        "description": "The text that appears in the menu when there are no options in the array passed to the `items` prop.",
        "name": "emptyStateText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "filterFn": {
        "defaultValue": null,
        "description": "A custom function used to filter the options in the array passed to the `items` prop.\nBy default, we filter out items that don't match the value of the autocomplete text input. The default filter is not case-sensitive.",
        "name": "filterFn",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: T, i: number) => boolean"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "The options for field values that are displayed in the dropdown menu.\nOne or more may be selected depending on the value of the `selectionVariant` prop.",
        "name": "items",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "T[]"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the data is loaded for the menu items",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectedItemIds": {
        "defaultValue": null,
        "description": "The IDs of the selected items",
        "name": "selectedItemIds",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string[]"
        }
      },
      "sortOnCloseFn": {
        "defaultValue": null,
        "description": "The sort function that is applied to the options in the array passed to the `items` prop after the user closes the menu.\nBy default, selected items are sorted to the top after the user closes the menu.",
        "name": "sortOnCloseFn",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(itemIdA: string, itemIdB: string) => number"
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "Whether there can be one item selected from the menu or multiple items selected from the menu",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"multiple\" | \"single\""
        }
      },
      "onOpenChange": {
        "defaultValue": null,
        "description": "Function that gets called when the menu is opened or closed",
        "name": "onOpenChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(open: boolean) => void"
        }
      },
      "onSelectedChange": {
        "defaultValue": null,
        "description": "The function that is called when an item in the list is selected or deselected",
        "name": "onSelectedChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "OnSelectedChange<T>"
        }
      },
      "customScrollContainerRef": {
        "defaultValue": null,
        "description": "If the menu is rendered in a scrolling element other than the `Autocomplete.Overlay` component,\npass the ref of that element to `customScrollContainerRef` to ensure the container automatically\nscrolls when the user highlights an item in the menu that is outside the scroll container",
        "name": "customScrollContainerRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.MutableRefObject<HTMLElement>"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Autocomplete/AutocompleteOverlay.tsx",
    "description": "",
    "displayName": "AutocompleteOverlay",
    "methods": [],
    "props": {
      "menuAnchorRef": {
        "defaultValue": null,
        "description": "The ref of the element that the position of the menu is based on. By default, the menu is positioned based on the text input",
        "name": "menuAnchorRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLElement>"
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "Props to be spread on the internal `Overlay` component.",
        "name": "overlayProps",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Autocomplete/AutocompleteOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"height\" | ... 7 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\""
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\""
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "",
        "name": "maxWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\""
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\""
        }
      },
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"hidden\" | \"auto\" | \"visible\" | \"scroll\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "anchorSide": {
        "defaultValue": null,
        "description": "",
        "name": "anchorSide",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "AnchorSide"
        }
      },
      "ignoreClickRefs": {
        "defaultValue": null,
        "description": "",
        "name": "ignoreClickRefs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLElement>[]"
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "initialFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLElement>"
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "returnFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLElement>"
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: TouchOrMouseEvent) => void"
        }
      },
      "onEscape": {
        "defaultValue": null,
        "description": "",
        "name": "onEscape",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: KeyboardEvent) => void"
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"hidden\" | \"visible\""
        }
      },
      "data-test-id": {
        "defaultValue": null,
        "description": "",
        "name": "data-test-id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "unknown"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "top": {
        "defaultValue": null,
        "description": "",
        "name": "top",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "left": {
        "defaultValue": null,
        "description": "",
        "name": "left",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "right": {
        "defaultValue": null,
        "description": "",
        "name": "right",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "bottom": {
        "defaultValue": null,
        "description": "",
        "name": "bottom",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "portalContainerName": {
        "defaultValue": null,
        "description": "",
        "name": "portalContainerName",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "preventFocusOnOpen": {
        "defaultValue": null,
        "description": "",
        "name": "preventFocusOnOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"div\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Avatar/Avatar.tsx",
    "description": "",
    "displayName": "Avatar",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "value": 20
        },
        "description": "Sets the width and height of the avatar.",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number | ResponsiveValue<number>"
        }
      },
      "square": {
        "defaultValue": {
          "value": false
        },
        "description": "Sets the shape of the avatar to a square if true. If false, the avatar will be circular.",
        "name": "square",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "alt": {
        "defaultValue": {
          "value": ""
        },
        "description": "Provide alt text when the Avatar is used without the user's name next to it.",
        "name": "alt",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "ImgHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ImgHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "src": {
        "defaultValue": null,
        "description": "URL of the avatar image.",
        "name": "src",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "ImgHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "ImgHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Avatar/Avatar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/AvatarPair/AvatarPair.tsx",
    "description": "",
    "displayName": "AvatarPair",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/AvatarStack/AvatarStack.tsx",
    "description": "",
    "displayName": "AvatarStack",
    "methods": [],
    "props": {
      "alignRight": {
        "defaultValue": null,
        "description": "",
        "name": "alignRight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/AvatarStack/AvatarStack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableExpand": {
        "defaultValue": null,
        "description": "",
        "name": "disableExpand",
        "declarations": [
          {
            "fileName": "react/packages/react/src/AvatarStack/AvatarStack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/AvatarStack/AvatarStack.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number | ResponsiveValue<number>"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Blankslate/Blankslate.tsx",
    "description": "",
    "displayName": "Blankslate",
    "methods": [],
    "props": {
      "border": {
        "defaultValue": null,
        "description": "Add a border around this component",
        "name": "border",
        "parent": {
          "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
          "name": "BlankslateProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "BlankslateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "narrow": {
        "defaultValue": null,
        "description": "Constrain the maximum width of this component",
        "name": "narrow",
        "parent": {
          "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
          "name": "BlankslateProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "BlankslateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "spacious": {
        "defaultValue": null,
        "description": "Increase the padding of this component",
        "name": "spacious",
        "parent": {
          "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
          "name": "BlankslateProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "BlankslateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Blankslate/index.tsx",
    "description": "",
    "displayName": "Blankslate",
    "methods": [],
    "props": {
      "border": {
        "defaultValue": null,
        "description": "Add a border around this component",
        "name": "border",
        "parent": {
          "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
          "name": "BlankslateProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "BlankslateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "narrow": {
        "defaultValue": null,
        "description": "Constrain the maximum width of this component",
        "name": "narrow",
        "parent": {
          "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
          "name": "BlankslateProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "BlankslateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "spacious": {
        "defaultValue": null,
        "description": "Increase the padding of this component",
        "name": "spacious",
        "parent": {
          "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
          "name": "BlankslateProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Blankslate/Blankslate.tsx",
            "name": "BlankslateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Box/Box.tsx",
    "description": "",
    "displayName": "Box",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/BranchName/BranchName.tsx",
    "description": "",
    "displayName": "BranchName",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
    "description": "",
    "displayName": "Breadcrumbs",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
          "name": "BreadcrumbsProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Breadcrumbs/Breadcrumbs.tsx",
            "name": "BreadcrumbsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Button/Button.tsx",
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "block": {
        "defaultValue": null,
        "description": "",
        "name": "block",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "leadingVisual": {
        "defaultValue": null,
        "description": "",
        "name": "leadingVisual",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "trailingVisual": {
        "defaultValue": null,
        "description": "",
        "name": "trailingVisual",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "trailingAction": {
        "defaultValue": null,
        "description": "",
        "name": "trailingAction",
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ButtonGroup/ButtonGroup.tsx",
    "description": "",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Checkbox/Checkbox.tsx",
    "description": "An accessible, native checkbox component",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply inactive visual appearance to the checkbox",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Indicates whether the checkbox must be checked",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which checkbox inputs are selected",
        "name": "value",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | (string & readonly string[])"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "Only used to inform ARIA attributes. Individual checkboxes do not have validation styles.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "indeterminate": {
        "defaultValue": null,
        "description": "Apply indeterminate visual appearance to the checkbox",
        "name": "indeterminate",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Checkbox/Checkbox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CheckboxGroup/CheckboxGroup.tsx",
    "description": "",
    "displayName": "CheckboxGroup",
    "methods": [],
    "props": {
      "onChange": {
        "defaultValue": null,
        "description": "An onChange handler that gets called when any of the checkboxes change",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CheckboxGroup/CheckboxGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(selected: string[], e?: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input group allows user input",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "name": "required",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CircleBadge/CircleBadge.tsx",
    "description": "",
    "displayName": "CircleBadge.Icon",
    "methods": [],
    "props": {
      "inline": {
        "defaultValue": null,
        "description": "",
        "name": "inline",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleBadge/CircleBadge.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleBadge/CircleBadge.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleBadge/CircleBadge.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CircleOcticon/CircleOcticon.tsx",
    "description": "",
    "displayName": "CircleOcticon",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleOcticon/CircleOcticon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ElementType"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleOcticon/CircleOcticon.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-system/index.d.ts",
            "name": "SizeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number & ResponsiveValue<Height<TLengthStyledSystem>, Required<Theme<TLengthStyledSystem>>>"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/CircleOcticon/CircleOcticon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ComponentType<React.PropsWithChildren<{ size?: number | Size; }>>"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
    "description": "This hook takes no parameters and returns an `async` function, `confirm`. When `confirm`\nis called, it shows the confirmation dialog. When the dialog is dismissed, a promise is\nresolved with `true` or `false` depending on whether or not the confirm button was used.",
    "displayName": "useConfirm",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
    "description": "A ConfirmationDialog is a special kind of dialog with more rigid behavior. It\nis used to confirm a user action. ConfirmationDialogs always have exactly\ntwo buttons: one to cancel the action and one to confirm it. No custom\nrendering capabilities are provided for ConfirmationDialog.",
    "displayName": "ConfirmationDialog",
    "methods": [],
    "props": {
      "onClose": {
        "defaultValue": null,
        "description": "Required. This callback is invoked when a gesture to close the dialog\nis performed. The first argument indicates the gesture.",
        "name": "onClose",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(gesture: \"escape\" | \"confirm\" | \"close-button\" | \"cancel\") => void"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Required. The title of the ConfirmationDialog. This is usually a brief\nquestion.",
        "name": "title",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "cancelButtonContent": {
        "defaultValue": null,
        "description": "The text to use for the cancel button. Default: \"Cancel\".",
        "name": "cancelButtonContent",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "confirmButtonContent": {
        "defaultValue": null,
        "description": "The text to use for the confirm button. Default: \"OK\".",
        "name": "confirmButtonContent",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "confirmButtonType": {
        "defaultValue": null,
        "description": "The type of button to use for the confirm button. Default: Button.",
        "name": "confirmButtonType",
        "parent": {
          "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
          "name": "ConfirmationDialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ConfirmationDialog/ConfirmationDialog.tsx",
            "name": "ConfirmationDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"normal\" | \"danger\" | \"primary\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/CounterLabel/CounterLabel.tsx",
    "description": "",
    "displayName": "CounterLabel",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "primerid": "data_table",
      "primerstatus": "draft",
      "primera11yreviewed": "false",
      "primerstories": "drafts-components-datatable-features--with-title drafts-components-datatable-features--with-title-and-subtitle drafts-components-datatable-features--with-sorting drafts-components-datatable-features--with-actions drafts-components-datatable-features--with-action drafts-components-datatable-features--with-row-action drafts-components-datatable-features--with-row-actions drafts-components-datatable-features--with-row-action-menu drafts-components-datatable-features--with-custom-heading drafts-components-datatable-features--with-no-content drafts-components-datatable-features--with-loading drafts-components-datatable-features--with-pagination"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/DataTable.tsx",
    "description": "The `table` element where all columns and rows are rendered.",
    "displayName": "DataTable",
    "methods": [],
    "props": {
      "aria-describedby": {
        "defaultValue": null,
        "description": "Provide an id to an element which uniquely describes this table",
        "name": "aria-describedby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Provide an id to an element which uniquely labels this table",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "cellPadding": {
        "defaultValue": null,
        "description": "Specify the amount of space that should be available around the contents of\na cell",
        "name": "cellPadding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"normal\" | \"condensed\" | \"spacious\""
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Provide a collection of the rows which will be rendered inside of the table",
        "name": "data",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Data[]"
        }
      },
      "columns": {
        "defaultValue": null,
        "description": "Provide the columns for the table and the fields in `data` to which they\ncorrespond",
        "name": "columns",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Column<Data>[]"
        }
      },
      "initialSortColumn": {
        "defaultValue": null,
        "description": "Provide the id or field of the column by which the table is sorted. When\nusing this `prop`, the input data must be sorted by this column in\nascending order",
        "name": "initialSortColumn",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "initialSortDirection": {
        "defaultValue": null,
        "description": "Provide the sort direction that the table should be sorted by on the\ncurrently sorted column",
        "name": "initialSortDirection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/DataTable.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"ASC\" | \"DESC\""
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.ErrorDialog",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/ErrorDialog.tsx",
    "description": "A dialog for showing an error when rendering a DataTable",
    "displayName": "ErrorDialog",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": {
          "value": "Error"
        },
        "description": "Provide an optional title for the dialog",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/ErrorDialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onRetry": {
        "defaultValue": null,
        "description": "Provide an optional handler to be called when the user confirms to retry",
        "name": "onRetry",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/ErrorDialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onDismiss": {
        "defaultValue": null,
        "description": "Provide an optional handler to be called when the user dismisses the dialog",
        "name": "onDismiss",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/ErrorDialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Pagination",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Pagination.tsx",
    "description": "A pagination component specific to the `DataTable` component.",
    "displayName": "Pagination",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "Provide a label for the navigation landmark rendered by this component",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "defaultPageIndex": {
        "defaultValue": null,
        "description": "Provide an optional index to specify the default selected page",
        "name": "defaultPageIndex",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Optionally provide an `id` that is placed on the navigation landmark\nrendered by this component",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Optionally provide a handler that is called whenever the pagination state\nis updated",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(state: PaginationState) => void"
        }
      },
      "pageSize": {
        "defaultValue": {
          "value": 25
        },
        "description": "Optionally specify the number of items within a page",
        "name": "pageSize",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showPages": {
        "defaultValue": {
          "value": "{narrow: false}"
        },
        "description": "Whether to show the page numbers",
        "name": "showPages",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | ResponsiveValue<boolean>"
        }
      },
      "totalCount": {
        "defaultValue": null,
        "description": "Specify the total number of items within the collection",
        "name": "totalCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Container",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "",
    "displayName": "TableContainer",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Title",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "",
    "displayName": "TableTitle",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "Provide an alternate element or component to use as the container for\n`TableSubtitle`. This is useful when specifying markup that is more\nsemantic for your use-case, such as a heading tag.",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Provide a unique id for the table subtitle. This should be used along with\n`aria-labelledby` on `DataTable`",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Subtitle",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "",
    "displayName": "TableSubtitle",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "Provide an alternate element or component to use as the container for\n`TableSubtitle`. This is useful when specifying markup that is more\nsemantic for your use-case",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Provide a unique id for the table subtitle. This should be used along with\n`aria-describedby` on `DataTable`",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Actions",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The container for a table component.",
    "displayName": "TableActions",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Divider",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "An optional divider to separate the area that contains Table.Title and Table.Actions from Table.Subtitle.",
    "displayName": "TableDivider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `table` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "Table",
    "methods": [],
    "props": {
      "aria-describedby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that describes the object.\nProvide an id to an element which uniquely describes this table\n@see aria-labelledby",
        "name": "aria-describedby",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that labels the current element.\nProvide an id to an element which uniquely labels this table\n@see aria-describedby.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "cellPadding": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "Specify the amount of space that should be available around the contents of\na cell",
        "name": "cellPadding",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "TableHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TableHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"normal\" | \"condensed\" | \"spacious\""
        }
      },
      "gridTemplateColumns": {
        "defaultValue": null,
        "description": "Column width definitions",
        "name": "gridTemplateColumns",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Head",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `thead` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "TableHead",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Body",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `tbody` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "TableBody",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Row",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `tr` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "TableRow",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "alias": "Table.Header",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `th` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "TableHeader",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": null,
        "description": "The horizontal alignment of the cell's content",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "CellAlignment"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.SortHeader",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "Same as `Table.Header`, but each `th` contains a button that performs a sort. Not intended to be used directly unless you are building your own table component.",
    "displayName": "TableSortHeader",
    "methods": [],
    "props": {
      "align": {
        "defaultValue": null,
        "description": "The horizontal alignment of the cell's content",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "CellAlignment"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "Specify the sort direction for the TableHeader",
        "name": "direction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "SortDirection"
        }
      },
      "onToggleSort": {
        "defaultValue": null,
        "description": "Provide a handler that is called when the sortable TableHeader is\ninteracted with via a click or keyboard interaction",
        "name": "onToggleSort",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.Cell",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "The `td` or `tr` element for a table component. Not intended to be used directly unless you are building your own table component.",
    "displayName": "TableCell",
    "methods": [],
    "props": {
      "scope": {
        "defaultValue": null,
        "description": "Provide the scope for a table cell, useful for defining a row header using\n`scope=\"row\"`",
        "name": "scope",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "TdHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TdHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"row\""
        }
      },
      "align": {
        "defaultValue": null,
        "description": "The horizontal alignment of the cell's content",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "CellAlignment"
        }
      }
    }
  },
  {
    "tags": {
      "alias": "Table.CellPlaceholder",
      "primerparentid": "data_table"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "Placeholder content to be used inside of a TableCell.",
    "displayName": "TableCellPlaceholder",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "primerparentid": "data_table",
      "alias": "Table.Skeleton"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/DataTable/Table.tsx",
    "description": "A placeholder \"skeleton\" to use when table content is loading. Not intended to be used directly unless you are building your own table component.",
    "displayName": "TableSkeleton",
    "methods": [],
    "props": {
      "cellPadding": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "Specify the amount of space that should be available around the contents of\na cell",
        "name": "cellPadding",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "TableHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TableHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"normal\" | \"condensed\" | \"spacious\""
        }
      },
      "columns": {
        "defaultValue": null,
        "description": "Provide an array of columns for the table. Columns will render as the headers\nof the table.",
        "name": "columns",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Column<Data>[]"
        }
      },
      "rows": {
        "defaultValue": {
          "value": 10
        },
        "description": "Optionally specify the number of rows which should be included in the\nskeleton state of the component",
        "name": "rows",
        "declarations": [
          {
            "fileName": "react/packages/react/src/DataTable/Table.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Details/Details.tsx",
    "description": "",
    "displayName": "Details",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Dialog/Dialog.tsx",
    "description": "A dialog is a type of overlay that can be used for confirming actions, asking\nfor disambiguation, and presenting small forms. They generally allow the user\nto focus on a quick task without having to navigate to a different page.\n\nDialogs appear in the page after a direct user interaction. Don't show dialogs\non page load or as system alerts.\n\nDialogs appear centered in the page, with a visible backdrop that dims the rest\nof the window for focus.\n\nAll dialogs have a title and a close button.\n\nDialogs are modal. Dialogs can be dismissed by clicking on the close button,\npressing the escape key, or by interacting with another button in the dialog.\nTo avoid losing information and missing important messages, clicking outside\nof the dialog will not close it.\n\nThe sub components provided (e.g. Header, Title, etc.) are available for custom\nrenderers only. They are not intended to be used otherwise.",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "Title of the Dialog. Also serves as the aria-label for this Dialog.",
        "name": "title",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "subtitle": {
        "defaultValue": null,
        "description": "The Dialog's subtitle. Optional. Rendered below the title in smaller\ntype with less contrast. Also serves as the aria-describedby for this\nDialog.",
        "name": "subtitle",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "renderHeader": {
        "defaultValue": null,
        "description": "Provide a custom renderer for the dialog header. This content is\nrendered directly into the dialog body area, full bleed from edge\nto edge, top to the start of the body element.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "name": "renderHeader",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.FunctionComponent<React.PropsWithChildren<DialogHeaderProps>>"
        }
      },
      "renderBody": {
        "defaultValue": null,
        "description": "Provide a custom render function for the dialog body. This content is\nrendered directly into the dialog body area, full bleed from edge to\nedge, header to footer.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "name": "renderBody",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.FunctionComponent<React.PropsWithChildren<DialogProps>>"
        }
      },
      "renderFooter": {
        "defaultValue": null,
        "description": "Provide a custom render function for the dialog footer. This content is\nrendered directly into the dialog footer area, full bleed from edge to\nedge, end of the body element to bottom.\n\nWarning: using a custom renderer may violate Primer UX principles.",
        "name": "renderFooter",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.FunctionComponent<React.PropsWithChildren<DialogProps>>"
        }
      },
      "footerButtons": {
        "defaultValue": null,
        "description": "Specifies the buttons to be rendered in the Dialog footer.",
        "name": "footerButtons",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogButtonProps[]"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "This method is invoked when a gesture to close the dialog is used (either\nan Escape key press or clicking the \"X\" in the top-right corner). The\ngesture argument indicates the gesture that was used to close the dialog\n(either 'close-button' or 'escape').",
        "name": "onClose",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(gesture: \"escape\" | \"close-button\") => void"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "Default: \"dialog\". The ARIA role to assign to this dialog.\n@see https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal\n@see https://www.w3.org/TR/wai-aria-practices-1.1/#alertdialog",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"dialog\" | \"alertdialog\""
        }
      },
      "width": {
        "defaultValue": null,
        "description": "The width of the dialog.\nsmall: 296px\nmedium: 320px\nlarge: 480px\nxlarge: 640px",
        "name": "width",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"xlarge\""
        }
      },
      "height": {
        "defaultValue": null,
        "description": "The height of the dialog.\nsmall: 296x480\nlarge: 480x640\nauto: variable based on contents",
        "name": "height",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"auto\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "The position of the dialog",
        "name": "position",
        "parent": {
          "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"center\" | \"left\" | \"right\" | ResponsiveValue<\"center\" | \"left\" | \"right\" | \"bottom\" | \"fullscreen\">"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
    "description": "",
    "displayName": "FilteredActionList",
    "methods": [],
    "props": {
      "loading": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "loading",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholderText": {
        "defaultValue": null,
        "description": "",
        "name": "placeholderText",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "filterValue": {
        "defaultValue": null,
        "description": "",
        "name": "filterValue",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onFilterChange": {
        "defaultValue": null,
        "description": "",
        "name": "onFilterChange",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string, e: React.ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "textInputProps": {
        "defaultValue": null,
        "description": "",
        "name": "textInputProps",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<Omit<TextInputProps, \"onChange\">>"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "",
        "name": "inputRef",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLInputElement>"
        }
      },
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: ({ header, items, ...props }: GroupProps) => Element; }, \"items\">) & { ...; })[]"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[]"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "RenderItemFn"
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "({ header, items, ...props }: GroupProps) => Element"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inset\" | \"full\""
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "\"multiple\" | \"single\""
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/FormControl.tsx",
    "description": "",
    "displayName": "FormControl",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether the control allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for this control. Used to associate the label, validation text, and caption text",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "layout": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "The direction the content flows.\nVertical layout is used by default, and horizontal layout is used for checkbox and radio inputs.",
        "name": "layout",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlCaption.tsx",
    "description": "",
    "displayName": "FormControlCaption",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlCaption.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlContext.tsx",
    "description": "This is the private/internal interface for subcomponents of `FormControl`.",
    "displayName": "useFormControlContext",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "param": "externalProps The external props passed to this component. If provided, these props will be merged with the\n`FormControl` props, with external props taking priority."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlContext.tsx",
    "description": "Make any component compatible with `FormControl`'s automatic wiring up of accessibility attributes & validation by\nreading the props from this hook and merging them with the passed-in props. If used outside of `FormControl`, this\nhook has no effect.\nMake any component compatible with `FormControl`'s automatic wiring up of accessibility attributes & validation by\nreading the props from this hook and handling them / assigning them to the underlying form control. If used outside\nof `FormControl`, this hook has no effect.",
    "displayName": "useFormControlForwardedProps",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlContext.tsx",
    "description": "",
    "displayName": "FormControlContextProvider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlLabel.tsx",
    "description": "",
    "displayName": "FormControlLabel",
    "methods": [],
    "props": {
      "htmlFor": {
        "defaultValue": null,
        "description": "",
        "name": "htmlFor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Whether the label should be visually hidden",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"label\" | \"legend\" | \"span\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlLeadingVisual.tsx",
    "description": "",
    "displayName": "FormControlLeadingVisual",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/FormControl/_FormControlValidation.tsx",
    "description": "",
    "displayName": "FormControlValidation",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Header/Header.tsx",
    "description": "",
    "displayName": "Header.Item",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Hidden/Hidden.tsx",
    "description": "",
    "displayName": "Hidden",
    "methods": [],
    "props": {
      "when": {
        "defaultValue": null,
        "description": "",
        "name": "when",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Hidden/Hidden.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Viewport | Viewport[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Hidden/index.tsx",
    "description": "",
    "displayName": "Hidden",
    "methods": [],
    "props": {
      "when": {
        "defaultValue": null,
        "description": "",
        "name": "when",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Hidden/Hidden.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Viewport | Viewport[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/LabelGroup/LabelGroup.tsx",
    "description": "",
    "displayName": "LabelGroup",
    "methods": [],
    "props": {
      "overflowStyle": {
        "defaultValue": {
          "value": "overlay"
        },
        "description": "How hidden tokens should be shown. `'inline'` shows the hidden tokens after the visible tokens. `'overlay'` shows all tokens in an overlay that appears on top of the visible tokens.",
        "name": "overflowStyle",
        "declarations": [
          {
            "fileName": "react/packages/react/src/LabelGroup/LabelGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inline\" | \"overlay\""
        }
      },
      "visibleChildCount": {
        "defaultValue": null,
        "description": "How many tokens to show. `'auto'` truncates the tokens to fit in the parent container. Passing a number will truncate after that number tokens. If this is undefined, tokens will never be truncated.",
        "name": "visibleChildCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/LabelGroup/LabelGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"auto\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/NavList/NavList.tsx",
    "description": "",
    "displayName": "NavList",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Octicon/Octicon.tsx",
    "description": "",
    "displayName": "Octicon",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Octicon/Octicon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Octicon/Octicon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ElementType"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Overlay/Overlay.tsx",
    "description": "",
    "displayName": "StyledOverlay",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"initial\" | \"large\" | \"medium\" | \"auto\" | \"fit-content\" | \"xsmall\" | \"xlarge\""
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xsmall\" | \"xlarge\""
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "",
        "name": "maxWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"xlarge\" | \"xxlarge\""
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"hidden\" | \"visible\""
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\""
        }
      },
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"hidden\" | \"auto\" | \"visible\" | \"scroll\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "anchorSide": {
        "defaultValue": null,
        "description": "",
        "name": "anchorSide",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Overlay/Overlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "AnchorSide"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageHeader/PageHeader.tsx",
    "description": "",
    "displayName": "PageHeader",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.AriaAttributes"
        }
      },
      "as": {
        "defaultValue": {
          "value": "h2"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageHeader/PageHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PageLayout/PageLayout.tsx",
    "description": "",
    "displayName": "PageLayout",
    "methods": [],
    "props": {
      "containerWidth": {
        "defaultValue": {
          "value": "xlarge"
        },
        "description": "The maximum width of the page container",
        "name": "containerWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"large\" | \"medium\" | \"full\" | \"xlarge\""
        }
      },
      "padding": {
        "defaultValue": {
          "value": "none"
        },
        "description": "The spacing between the outer edges of the page container and the viewport",
        "name": "padding",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"normal\" | \"none\" | \"condensed\""
        }
      },
      "rowGap": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "",
        "name": "rowGap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"normal\" | \"none\" | \"condensed\""
        }
      },
      "columnGap": {
        "defaultValue": {
          "value": "normal"
        },
        "description": "",
        "name": "columnGap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"normal\" | \"none\" | \"condensed\""
        }
      },
      "_slotsConfig": {
        "defaultValue": null,
        "description": "Private prop to allow SplitPageLayout to customize slot components",
        "name": "_slotsConfig",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PageLayout/PageLayout.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Record<\"footer\" | \"header\", React.ElementType>"
        }
      },
      "sx": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Pagehead/Pagehead.tsx",
    "description": "",
    "displayName": "Pagehead",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Pagination/Pagination.tsx",
    "description": "",
    "displayName": "Pagination",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Record<string, unknown>"
        }
      },
      "pageCount": {
        "defaultValue": null,
        "description": "",
        "name": "pageCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "currentPage": {
        "defaultValue": null,
        "description": "",
        "name": "currentPage",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onPageChange": {
        "defaultValue": null,
        "description": "",
        "name": "onPageChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: React.MouseEvent, n: number) => void"
        }
      },
      "hrefBuilder": {
        "defaultValue": null,
        "description": "",
        "name": "hrefBuilder",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(n: number) => string"
        }
      },
      "marginPageCount": {
        "defaultValue": {
          "value": 1
        },
        "description": "",
        "name": "marginPageCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showPages": {
        "defaultValue": {
          "value": true
        },
        "description": "",
        "name": "showPages",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | ResponsiveValue<boolean>"
        }
      },
      "surroundingPageCount": {
        "defaultValue": {
          "value": 2
        },
        "description": "",
        "name": "surroundingPageCount",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Pagination/Pagination.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/PointerBox/PointerBox.tsx",
    "description": "",
    "displayName": "PointerBox",
    "methods": [],
    "props": {
      "caret": {
        "defaultValue": null,
        "description": "",
        "name": "caret",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Location"
        }
      },
      "bg": {
        "defaultValue": null,
        "description": "The color utility parses a component's `color` and `bg` props and converts them into CSS declarations.\nBy default the raw value of the prop is returned.\n\nColor palettes can be configured with the ThemeProvider to use keys as prop values, with support for dot notation.\nArray values are converted into responsive values.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)",
        "name": "bg",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-system/index.d.ts",
            "name": "BackgroundColorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string & ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>"
        }
      },
      "borderColor": {
        "defaultValue": null,
        "description": "The border-color shorthand CSS property sets the color of all sides of an element's border.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)",
        "name": "borderColor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-system/index.d.ts",
            "name": "BorderColorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string & ResponsiveValue<string | number | symbol, Required<Theme<TLengthStyledSystem>>>"
        }
      },
      "border": {
        "defaultValue": null,
        "description": "The border CSS property sets an element's border. It's a shorthand for border-width, border-style,\nand border-color.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border)",
        "name": "border",
        "declarations": [
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-system/index.d.ts",
            "name": "BorderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(string | number) & ResponsiveValue<Border<TLengthStyledSystem>, Required<Theme<TLengthStyledSystem>>>"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/PointerBox/PointerBox.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject & { bg?: string; backgroundColor?: string; borderColor?: string; }"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Popover/Popover.tsx",
    "description": "",
    "displayName": "Popover.Content",
    "methods": [],
    "props": {
      "caret": {
        "defaultValue": null,
        "description": "",
        "name": "caret",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Popover/Popover.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "CaretPosition"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Popover/Popover.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "relative": {
        "defaultValue": null,
        "description": "",
        "name": "relative",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Popover/Popover.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {
      "param": "root The element that will be the root for portals created in this container\nname The name of the container, to be used with the `containerName` prop on the Portal Component.\nIf name is not specified, registers the default portal root."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Portal/Portal.tsx",
    "description": "Register a container to serve as a portal root.",
    "displayName": "registerPortalRoot",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "see": "https://reactjs.org/docs/portals.html"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Portal/Portal.tsx",
    "description": "Creates a React Portal, placing all children in a separate physical DOM root node.",
    "displayName": "Portal",
    "methods": [],
    "props": {
      "onMount": {
        "defaultValue": null,
        "description": "Called when this portal is added to the DOM",
        "name": "onMount",
        "parent": {
          "fileName": "react/packages/react/src/Portal/Portal.tsx",
          "name": "PortalProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Portal/Portal.tsx",
            "name": "PortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "containerName": {
        "defaultValue": null,
        "description": "Optional. Mount this portal at the container specified\nby this name. The container must be previously registered\nwith `registerPortal`.",
        "name": "containerName",
        "parent": {
          "fileName": "react/packages/react/src/Portal/Portal.tsx",
          "name": "PortalProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Portal/Portal.tsx",
            "name": "PortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ProgressBar/ProgressBar.tsx",
    "description": "",
    "displayName": "ProgressBar.Item",
    "methods": [],
    "props": {
      "progress": {
        "defaultValue": null,
        "description": "",
        "name": "progress",
        "declarations": [
          {
            "fileName": "react/packages/react/src/ProgressBar/ProgressBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Radio/Radio.tsx",
    "description": "An accessible, native radio component for selecting one option from a list.",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "Name attribute of the input element. Required for grouping radio inputs",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply inactive visual appearance to the radio button",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Indicates whether the radio button must be checked before the form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "A unique value that is never shown to the user.\nUsed during form submission and to identify which radio button in a group is selected",
        "name": "value",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | (string & readonly string[])"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "Only used to inform ARIA attributes. Individual radio inputs do not have validation styles.",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "checked": {
        "defaultValue": null,
        "description": "Indicates whether the radio button is selected",
        "name": "checked",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Radio/Radio.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "InputHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/RadioGroup/RadioGroup.tsx",
    "description": "",
    "displayName": "RadioGroup",
    "methods": [],
    "props": {
      "onChange": {
        "defaultValue": null,
        "description": "An onChange handler that gets called when the selection changes",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/RadioGroup/RadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(selected: string, e?: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The name used to identify this group of radios",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/RadioGroup/RadioGroup.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input group allows user input",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "name": "required",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/RelativeTime/RelativeTime.tsx",
    "description": "",
    "displayName": "RelativeTime",
    "methods": [],
    "props": {
      "date": {
        "defaultValue": null,
        "description": "",
        "name": "date",
        "declarations": [],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "onRelativeTimeUpdated": {
        "defaultValue": null,
        "description": "",
        "name": "onRelativeTimeUpdated",
        "declarations": [],
        "required": false,
        "type": {
          "name": "(event: RelativeTimeUpdatedEvent) => void"
        }
      },
      "second": {
        "defaultValue": null,
        "description": "",
        "name": "second",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"numeric\" | \"2-digit\""
        }
      },
      "minute": {
        "defaultValue": null,
        "description": "",
        "name": "minute",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"numeric\" | \"2-digit\""
        }
      },
      "hour": {
        "defaultValue": null,
        "description": "",
        "name": "hour",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"numeric\" | \"2-digit\""
        }
      },
      "weekday": {
        "defaultValue": null,
        "description": "",
        "name": "weekday",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"narrow\" | \"short\" | \"long\""
        }
      },
      "day": {
        "defaultValue": null,
        "description": "",
        "name": "day",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"numeric\" | \"2-digit\""
        }
      },
      "month": {
        "defaultValue": null,
        "description": "",
        "name": "month",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"numeric\" | \"narrow\" | \"2-digit\" | \"short\" | \"long\""
        }
      },
      "year": {
        "defaultValue": null,
        "description": "",
        "name": "year",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"numeric\" | \"2-digit\""
        }
      },
      "timeZoneName": {
        "defaultValue": null,
        "description": "",
        "name": "timeZoneName",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"short\" | \"long\" | \"shortOffset\" | \"longOffset\" | \"shortGeneric\" | \"longGeneric\""
        }
      },
      "threshold": {
        "defaultValue": null,
        "description": "",
        "name": "threshold",
        "declarations": [],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tense": {
        "defaultValue": null,
        "description": "",
        "name": "tense",
        "declarations": [],
        "required": false,
        "type": {
          "name": "Tense"
        }
      },
      "precision": {
        "defaultValue": null,
        "description": "",
        "name": "precision",
        "declarations": [],
        "required": false,
        "type": {
          "name": "\"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"week\" | \"millisecond\""
        }
      },
      "format": {
        "defaultValue": null,
        "description": "",
        "name": "format",
        "declarations": [],
        "required": false,
        "type": {
          "name": "Format"
        }
      },
      "formatStyle": {
        "defaultValue": null,
        "description": "",
        "name": "formatStyle",
        "declarations": [],
        "required": false,
        "type": {
          "name": "FormatStyle"
        }
      },
      "datetime": {
        "defaultValue": null,
        "description": "",
        "name": "datetime",
        "declarations": [],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "connectedCallback": {
        "defaultValue": null,
        "description": "",
        "name": "connectedCallback",
        "declarations": [],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "disconnectedCallback": {
        "defaultValue": null,
        "description": "",
        "name": "disconnectedCallback",
        "declarations": [],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "attributeChangedCallback": {
        "defaultValue": null,
        "description": "",
        "name": "attributeChangedCallback",
        "declarations": [],
        "required": false,
        "type": {
          "name": "(attrName: string, oldValue: unknown, newValue: unknown) => void"
        }
      },
      "update": {
        "defaultValue": null,
        "description": "",
        "name": "update",
        "declarations": [],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
    "description": "",
    "displayName": "SegmentedControl",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-describedby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "Whether the control fills the width of its parent",
        "name": "fullWidth",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | ResponsiveValue<boolean>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "The handler that gets called when a segment is selected",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(selectedIndex: number) => void"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the buttons",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"medium\""
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Configure alternative ways to render the control when it gets rendered in tight spaces",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControl.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | Partial<Record<WidthOnlyViewportRangeKeys, \"default\" | \"hideLabels\" | \"dropdown\">>"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
    "description": "",
    "displayName": "SegmentedControlButton",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The visible label rendered in the button",
        "name": "children",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "DOMAttributes"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string & ReactNode"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether the segment is selected. This is used for controlled `SegmentedControls`, and needs to be updated using the `onChange` handler on `SegmentedControl`.",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "Whether the segment is selected. This is used for uncontrolled `SegmentedControls` to pick one `SegmentedControlButton` that is selected on the initial render.",
        "name": "defaultSelected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "leadingIcon": {
        "defaultValue": null,
        "description": "The leading icon comes before item label",
        "name": "leadingIcon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.FunctionComponent<React.PropsWithChildren<IconProps>>"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
    "description": "",
    "displayName": "SegmentedControlIconButton",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon that represents the segmented control item",
        "name": "icon",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "React.FunctionComponent<React.PropsWithChildren<IconProps>>"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether the segment is selected. This is used for controlled SegmentedControls, and needs to be updated using the onChange handler on SegmentedControl.",
        "name": "selected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultSelected": {
        "defaultValue": null,
        "description": "Whether the segment is selected. This is used for uncontrolled SegmentedControls to pick one SegmentedControlButton that is selected on the initial render.",
        "name": "defaultSelected",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SegmentedControl/SegmentedControlIconButton.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Select/Select.tsx",
    "description": "",
    "displayName": "Select",
    "methods": [],
    "props": {
      "monospace": {
        "defaultValue": null,
        "description": "",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "block": {
        "defaultValue": null,
        "description": "",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "TextInputSizes"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "SelectHTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "SelectHTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hasTrailingAction": {
        "defaultValue": null,
        "description": "",
        "name": "hasTrailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isInputFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isInputFocused",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "",
        "name": "placeholder",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Select/Select.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SelectPanel/SelectPanel.tsx",
    "description": "",
    "displayName": "SelectPanel",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": {
          "value": "isMultiSelectVariant(selected) ? 'Select items' : 'Select an item'"
        },
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "subtitle": {
        "defaultValue": null,
        "description": "",
        "name": "subtitle",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "onOpenChange": {
        "defaultValue": null,
        "description": "",
        "name": "onOpenChange",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(open: boolean, gesture: \"anchor-click\" | \"anchor-key-press\" | \"click-outside\" | \"escape\" | \"selection\") => void"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "",
        "name": "placeholder",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputLabel": {
        "defaultValue": {
          "value": "Filter items"
        },
        "description": "",
        "name": "inputLabel",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "",
        "name": "overlayProps",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"height\" | ... 7 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>"
        }
      },
      "footer": {
        "defaultValue": null,
        "description": "",
        "name": "footer",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inset\" | \"full\""
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "",
        "name": "loading",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[]"
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "RenderItemFn"
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "({ header, items, ...props }: GroupProps) => Element"
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: ({ header, items, ...props }: GroupProps) => Element; }, \"items\">) & { ...; })[]"
        }
      },
      "placeholderText": {
        "defaultValue": {
          "value": "Filter items"
        },
        "description": "",
        "name": "placeholderText",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "filterValue": {
        "defaultValue": null,
        "description": "",
        "name": "filterValue",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onFilterChange": {
        "defaultValue": null,
        "description": "",
        "name": "onFilterChange",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string, e: React.ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "textInputProps": {
        "defaultValue": null,
        "description": "",
        "name": "textInputProps",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<Omit<TextInputProps, \"onChange\">>"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "",
        "name": "inputRef",
        "parent": {
          "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
          "name": "FilteredActionListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/FilteredActionList/FilteredActionList.tsx",
            "name": "FilteredActionListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLInputElement>"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Determines whether the overlay portion of the component should be shown or not",
        "name": "open",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "renderAnchor": {
        "defaultValue": {
          "value": "props => {\n    const {children, ...rest} = props\n    return (\n      <Button trailingAction={TriangleDownIcon} {...rest}>\n        {children}\n      </Button>\n    )\n  }"
        },
        "description": "A custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.\nA custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.",
        "name": "renderAnchor",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element"
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "An override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.\nAn override to the internal ref that will be spread on to the renderAnchor",
        "name": "anchorRef",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "anchorId": {
        "defaultValue": null,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "name": "anchorId",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "",
        "name": "selected",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelSingleSelection"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelSingleSelection"
          },
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelMultiSelection"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput | ItemInput[]"
        }
      },
      "onSelectedChange": {
        "defaultValue": null,
        "description": "",
        "name": "onSelectedChange",
        "parent": {
          "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
          "name": "SelectPanelSingleSelection"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelSingleSelection"
          },
          {
            "fileName": "react/packages/react/src/SelectPanel/SelectPanel.tsx",
            "name": "SelectPanelMultiSelection"
          }
        ],
        "required": true,
        "type": {
          "name": "((selected: ItemInput) => void) | ((selected: ItemInput[]) => void)"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Spinner/Spinner.tsx",
    "description": "",
    "displayName": "Spinner",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "Sets the width and height of the spinner.",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/Spinner/Spinner.tsx",
          "name": "SpinnerInternalProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Spinner/Spinner.tsx",
            "name": "SpinnerInternalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SplitPageLayout/SplitPageLayout.tsx",
    "description": "",
    "displayName": "SplitPageLayout",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/StateLabel/StateLabel.tsx",
    "description": "",
    "displayName": "StateLabel",
    "methods": [],
    "props": {
      "status": {
        "defaultValue": null,
        "description": "",
        "name": "status",
        "declarations": [
          {
            "fileName": "react/packages/react/src/StateLabel/StateLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "\"issueClosed\" | \"issueClosedNotPlanned\" | \"pullClosed\" | \"pullMerged\" | \"pullQueued\" | \"issueOpened\" | \"pullOpened\" | \"draft\" | \"issueDraft\" | \"unavailable\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/StateLabel/StateLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"normal\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/SubNav/SubNav.tsx",
    "description": "",
    "displayName": "SubNav.Link",
    "methods": [],
    "props": {
      "actions": {
        "defaultValue": null,
        "description": "",
        "name": "actions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"right\""
        }
      },
      "full": {
        "defaultValue": null,
        "description": "",
        "name": "full",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/SubNav/SubNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TabNav/TabNav.tsx",
    "description": "",
    "displayName": "TabNav.Link",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TestComponent/TestComponent.tsx",
    "description": "",
    "displayName": "TestComponentWithForwardRef",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": {
          "value": "Mona"
        },
        "description": "The name of the thing",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": {
          "value": "blue"
        },
        "description": "The color of the thing",
        "name": "color",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"blue\" | \"green\" | \"red\""
        }
      },
      "metadata": {
        "defaultValue": null,
        "description": "Metadata about the thing",
        "name": "metadata",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "{ age: number; location: string; }"
        }
      },
      "order": {
        "defaultValue": {
          "value": 0
        },
        "description": "The order of the thing",
        "name": "order",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isReal": {
        "defaultValue": null,
        "description": "Whether the thing is real",
        "name": "isReal",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TestComponent/TestComponent.tsx",
    "description": "",
    "displayName": "TestComponent",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": {
          "value": "Mona"
        },
        "description": "The name of the thing",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": {
          "value": "blue"
        },
        "description": "The color of the thing",
        "name": "color",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"blue\" | \"green\" | \"red\""
        }
      },
      "metadata": {
        "defaultValue": null,
        "description": "Metadata about the thing",
        "name": "metadata",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "{ age: number; location: string; }"
        }
      },
      "order": {
        "defaultValue": {
          "value": 0
        },
        "description": "The order of the thing",
        "name": "order",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isReal": {
        "defaultValue": null,
        "description": "Whether the thing is real",
        "name": "isReal",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TestComponent/TestComponent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Text/Text.tsx",
    "description": "",
    "displayName": "Text",
    "methods": [],
    "props": {
      "whiteSpace": {
        "defaultValue": null,
        "description": "",
        "name": "whiteSpace",
        "parent": {
          "fileName": "react/packages/react/src/constants.ts",
          "name": "SystemTypographyProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/constants.ts",
            "name": "SystemTypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"pre\" | \"normal\" | \"nowrap\" | \"pre-wrap\" | \"pre-line\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TextInput/TextInput.tsx",
    "description": "",
    "displayName": "TextInput",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "\"symbol\" | \"object\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | \"big\" | \"blockquote\" | \"body\" | \"br\" | \"button\" | \"canvas\" | ... 161 more ... | FunctionComponent<...>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TextInputWithTokens/TextInputWithTokens.tsx",
    "description": "",
    "displayName": "TextInputWithTokens",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Textarea/Textarea.tsx",
    "description": "An accessible, native textarea component that supports validation states.\nThis component accepts all native HTML <textarea> attributes as props.",
    "displayName": "Textarea",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Apply inactive visual appearance to the Textarea",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "TextareaHTMLAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "Indicates whether the Textarea validation state",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Block",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "resize": {
        "defaultValue": {
          "value": "both"
        },
        "description": "Allows resizing of the textarea",
        "name": "resize",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"none\" | \"both\" | \"horizontal\" | \"vertical\""
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "apply a high contrast color to background",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Timeline/Timeline.tsx",
    "description": "",
    "displayName": "Timeline.Item",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "clipSidebar": {
        "defaultValue": null,
        "description": "",
        "name": "clipSidebar",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Timeline/Timeline.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
    "description": "",
    "displayName": "ToggleSwitch",
    "methods": [],
    "props": {
      "defaultChecked": {
        "defaultValue": null,
        "description": "Uncontrolled - whether the switch is turned on",
        "name": "defaultChecked",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the switch is ready for user input",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the switch's value is being calculated",
        "name": "loading",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "checked": {
        "defaultValue": null,
        "description": "Whether the switch is turned on",
        "name": "checked",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "The callback that is called when the switch is toggled on or off",
        "name": "onChange",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(checked: boolean) => void"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "The callback that is called when the switch is clicked",
        "name": "onClick",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of the switch",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"medium\""
        }
      },
      "statusLabelPosition": {
        "defaultValue": null,
        "description": "Whether the \"on\" and \"off\" labels should appear before or after the switch.\n**This should only be changed when the switch's alignment needs to be adjusted.** For example: It needs to be left-aligned because the label appears above it and the caption appears below it.",
        "name": "statusLabelPosition",
        "parent": {
          "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
          "name": "ToggleSwitchProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/ToggleSwitch/ToggleSwitch.tsx",
            "name": "ToggleSwitchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CellAlignment"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/TokenBase.tsx",
    "description": "",
    "displayName": "isTokenInteractive",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether or not the token is disabled (non-interactive).",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "as": {
        "defaultValue": {
          "value": "span"
        },
        "description": "",
        "name": "as",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"a\" | \"button\" | \"span\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/_RemoveTokenButton.tsx",
    "description": "",
    "displayName": "RemoveTokenButton",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
          "name": "TokenButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
            "name": "TokenButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TokenSizeKeys"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "borderOffset": {
        "defaultValue": null,
        "description": "",
        "name": "borderOffset",
        "parent": {
          "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
          "name": "TokenButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
            "name": "TokenButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isParentInteractive": {
        "defaultValue": null,
        "description": "",
        "name": "isParentInteractive",
        "parent": {
          "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
          "name": "TokenButtonProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/_RemoveTokenButton.tsx",
            "name": "TokenButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Token/_TokenTextContainer.tsx",
    "description": "",
    "displayName": "TokenTextContainer",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text label inside the token",
        "name": "text",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "A unique identifier that can be associated with the token",
        "name": "id",
        "parent": {
          "fileName": "react/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        },
        "declarations": [
          {
            "fileName": "react/node_modules/@types/react/index.d.ts",
            "name": "HTMLAttributes"
          },
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Which size the token will be rendered at",
        "name": "size",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TokenSizeKeys"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether or not the token is disabled (non-interactive).",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      },
      "onRemove": {
        "defaultValue": null,
        "description": "The function that gets called when a user clicks the remove button, or keys \"Backspace\" or \"Delete\" when focused on the token",
        "name": "onRemove",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "hideRemoveButton": {
        "defaultValue": null,
        "description": "Whether the remove button should be rendered in the token",
        "name": "hideRemoveButton",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isSelected": {
        "defaultValue": null,
        "description": "Whether the token is selected",
        "name": "isSelected",
        "parent": {
          "fileName": "react/packages/react/src/Token/TokenBase.tsx",
          "name": "TokenBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/Token/TokenBase.tsx",
            "name": "TokenBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/Tooltip/Tooltip.tsx",
    "description": "",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "direction": {
        "defaultValue": {
          "value": "n"
        },
        "description": "",
        "name": "direction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"s\" | \"n\" | \"ne\" | \"e\" | \"se\" | \"sw\" | \"w\" | \"nw\""
        }
      },
      "text": {
        "defaultValue": null,
        "description": "",
        "name": "text",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "noDelay": {
        "defaultValue": null,
        "description": "",
        "name": "noDelay",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"left\" | \"right\""
        }
      },
      "wrap": {
        "defaultValue": null,
        "description": "",
        "name": "wrap",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Tooltip/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TooltipV2/Tooltip.tsx",
    "description": "",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "direction": {
        "defaultValue": {
          "value": "s"
        },
        "description": "The direction of the tooltip in relation to the trigger",
        "name": "direction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TooltipV2/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "TooltipDirection"
        }
      },
      "text": {
        "defaultValue": null,
        "description": "Text in the tooltip",
        "name": "text",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TooltipV2/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "type": {
        "defaultValue": {
          "value": "description"
        },
        "description": "Whether the tooltip content is used to label the trigger (like IconButton), or describe the trigger (most other uses)",
        "name": "type",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TooltipV2/Tooltip.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"label\" | \"description\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/TreeView/TreeView.tsx",
    "description": "",
    "displayName": "TreeView",
    "methods": [],
    "props": {
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.AriaAttributes"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.AriaAttributes"
        }
      },
      "flat": {
        "defaultValue": null,
        "description": "",
        "name": "flat",
        "declarations": [
          {
            "fileName": "react/packages/react/src/TreeView/TreeView.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/UnderlineNav/LoadingCounter.tsx",
    "description": "",
    "displayName": "LoadingCounter",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/UnderlineNav/UnderlineNav.tsx",
    "description": "",
    "displayName": "UnderlineNav",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
    "description": "",
    "displayName": "UnderlineNavItem",
    "methods": [],
    "props": {
      "as": {
        "defaultValue": null,
        "description": "Renders `UnderlineNav.Item` as given component i.e. react-router's Link",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/UnderlineNav/UnderlineNavItem.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/utils/polymorphic.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Use ActionMenu with composable API instead. See https://primer.style/react/ActionMenu for more details."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionMenu.tsx",
    "description": "",
    "displayName": "ActionMenu.Item",
    "methods": [],
    "props": {
      "anchorContent": {
        "defaultValue": null,
        "description": "Content that is passed into the renderAnchor component, which is a button by default.",
        "name": "anchorContent",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "onAction": {
        "defaultValue": null,
        "description": "A callback that triggers both on clicks and keyboard events. This callback will be overridden by item level `onAction` callbacks.",
        "name": "onAction",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(props: ItemProps, event?: any) => void"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjuction with `setOpen`.",
        "name": "open",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "setOpen": {
        "defaultValue": null,
        "description": "If defined, will control the open/closed state of the overlay. Must be used in conjuction with `open`.",
        "name": "setOpen",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(s: boolean) => void"
        }
      },
      "overlayProps": {
        "defaultValue": null,
        "description": "Props to be spread on the internal `Overlay` component.",
        "name": "overlayProps",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
          "name": "ActionMenuBaseProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionMenu.tsx",
            "name": "ActionMenuBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"ref\"> & { ...; }, \"height\" | ... 7 more ... | keyof BaseOverlayProps> & Omit<...> & BaseOverlayProps & { ...; }>"
        }
      },
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: ({ header, items, ...props }: GroupProps) => Element; }, \"items\">) & { ...; })[]"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[]"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "RenderItemFn"
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "({ header, items, ...props }: GroupProps) => Element"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inset\" | \"full\""
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "\"multiple\" | \"single\""
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "renderAnchor": {
        "defaultValue": {
          "value": "<T extends ButtonProps>(props: T) => <Button {...props} />"
        },
        "description": "A custom function component used to render the anchor element.\nWhen renderAnchor is null, an anchorRef is required.\nA custom function component used to render the anchor element.\nWill receive the selected text as `children` prop when an item is activated.",
        "name": "renderAnchor",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "<T extends React.HTMLAttributes<HTMLElement>>(props: T) => Element"
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "An override to the internal renderAnchor ref that will be used to position the overlay.\nWhen renderAnchor is null this can be used to make an anchor that is detached from ActionMenu.\nAn override to the internal ref that will be spread on to the renderAnchor",
        "name": "anchorRef",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "anchorId": {
        "defaultValue": null,
        "description": "An override to the internal id that will be spread on to the renderAnchor",
        "name": "anchorId",
        "parent": {
          "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
          "name": "AnchoredOverlayPropsWithoutAnchor"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithoutAnchor"
          },
          {
            "fileName": "react/packages/react/src/AnchoredOverlay/AnchoredOverlay.tsx",
            "name": "AnchoredOverlayPropsWithAnchor"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useDetails.tsx",
    "description": "",
    "displayName": "useDetails",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useDetails.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "RefObject<HTMLDetailsElement>"
        }
      },
      "closeOnOutsideClick": {
        "defaultValue": null,
        "description": "",
        "name": "closeOnOutsideClick",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useDetails.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultOpen": {
        "defaultValue": null,
        "description": "",
        "name": "defaultOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useDetails.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useDetails.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent) => void"
        }
      }
    }
  },
  {
    "tags": {
      "example": "function Example() {\n  const coarsePointer = useMedia('(pointer: coarse)');\n  // ...\n}"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useMedia.tsx",
    "description": "`useMedia` will use the given `mediaQueryString` with `matchMedia` to\ndetermine if the document matches the media query string.\n\nIf `MatchMedia` is used as an ancestor, `useMedia` will instead use the\nvalue of the media query string, if available",
    "displayName": "useMedia",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "example": "<MatchMedia features={{ \"(pointer: coarse)\": true}}>\n  <Children />\n</MatchMedia>"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useMedia.tsx",
    "description": "Use `MatchMedia` to emulate media conditions by passing in feature\nqueries to the `features` prop. If a component uses `useMedia` with the\nfeature passed in to `MatchMedia` it will force its value to match what is\nprovided to `MatchMedia`\n\nThis should be used for development and documentation only in situations\nwhere devtools cannot emulate this feature",
    "displayName": "MatchMedia",
    "methods": [],
    "props": {
      "features": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "",
        "name": "features",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useMedia.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "MediaQueryFeatures"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useOnOutsideClick.tsx",
    "description": "",
    "displayName": "useOnOutsideClick",
    "methods": [],
    "props": {
      "containerRef": {
        "defaultValue": null,
        "description": "",
        "name": "containerRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOnOutsideClick.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "ignoreClickRefs": {
        "defaultValue": null,
        "description": "",
        "name": "ignoreClickRefs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOnOutsideClick.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLElement>[]"
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOnOutsideClick.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(e: TouchOrMouseEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/hooks/useOverlay.tsx",
    "description": "",
    "displayName": "useOverlay",
    "methods": [],
    "props": {
      "ignoreClickRefs": {
        "defaultValue": null,
        "description": "",
        "name": "ignoreClickRefs",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "RefObject<HTMLElement>[]"
        }
      },
      "initialFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "initialFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "RefObject<HTMLElement>"
        }
      },
      "returnFocusRef": {
        "defaultValue": null,
        "description": "",
        "name": "returnFocusRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "RefObject<HTMLElement>"
        }
      },
      "onEscape": {
        "defaultValue": null,
        "description": "",
        "name": "onEscape",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(e: KeyboardEvent) => void"
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "",
        "name": "onClickOutside",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(e: TouchOrMouseEvent) => void"
        }
      },
      "overlayRef": {
        "defaultValue": null,
        "description": "",
        "name": "overlayRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "RefObject<HTMLDivElement>"
        }
      },
      "preventFocusOnOpen": {
        "defaultValue": null,
        "description": "",
        "name": "preventFocusOnOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/hooks/useOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/form-story-helpers.tsx",
    "description": "",
    "displayName": "getTextInputArgTypes",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/form-story-helpers.tsx",
    "description": "",
    "displayName": "getFormControlArgsByChildComponent",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether the control allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlCaption.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Whether the label should be visually hidden",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "",
        "name": "htmlFor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelChildren": {
        "defaultValue": null,
        "description": "",
        "name": "labelChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/form-story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "captionChildren": {
        "defaultValue": null,
        "description": "",
        "name": "captionChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/form-story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "validationChildren": {
        "defaultValue": null,
        "description": "",
        "name": "validationChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/form-story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/isNumeric.tsx",
    "description": "",
    "displayName": "isNumeric",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/ssr.tsx",
    "description": "",
    "displayName": "SSRProvider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/ssr.tsx",
    "description": "",
    "displayName": "useSSRSafeId",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/story-helpers.tsx",
    "description": "",
    "displayName": "getTextInputArgTypes",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/story-helpers.tsx",
    "description": "",
    "displayName": "getFormControlArgsByChildComponent",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether the control allows user input",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the user must specify a value for the input before the owning form can be submitted",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/FormControl.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlCaption.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          },
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "Whether the label should be visually hidden",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "",
        "name": "htmlFor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelChildren": {
        "defaultValue": null,
        "description": "",
        "name": "labelChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "captionChildren": {
        "defaultValue": null,
        "description": "",
        "name": "captionChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/FormControl/_FormControlValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "validationChildren": {
        "defaultValue": null,
        "description": "",
        "name": "validationChildren",
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/story-helpers.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/story-helpers.tsx",
    "description": "",
    "displayName": "OcticonArgType",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "Render the component (a React.createElement() or JSX expression)\ninto its intermediate object representation with 'type',\n'props', and 'children' keys\n\nThe returned object can be matched with expect().toEqual(), e.g.\n\n```js\nexpect(render(<Foo />)).toEqual(render(<div foo='bar' />))\n```",
    "displayName": "render",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "Render the component (a React.createElement() or JSX expression)\nusing react-test-renderer and return the root node\n```",
    "displayName": "renderRoot",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "Get the HTML class names rendered by the component instance\nas an array.\n\n```js\nexpect(renderClasses(<div className='a b' />))\n  .toEqual(['a', 'b'])\n```",
    "displayName": "renderClasses",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "Returns true if a node renders with a single class.",
    "displayName": "rendersClass",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "px",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "percent",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "renderStyles",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "getComputedStyles",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "This provides a layer of compatibility between the render() function from\nreact-test-renderer and Enzyme's mount()",
    "displayName": "getProps",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "getClassName",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "getClasses",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "loadCSS",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "unloadCSS",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/utils/testing.tsx",
    "description": "",
    "displayName": "behavesAsComponent",
    "methods": [],
    "props": {
      "Component": {
        "defaultValue": null,
        "description": "",
        "name": "Component",
        "parent": {
          "fileName": "react/packages/react/src/utils/testing.tsx",
          "name": "BehavesAsComponent"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/testing.tsx",
            "name": "BehavesAsComponent"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ComponentType<React.PropsWithChildren<any>>"
        }
      },
      "toRender": {
        "defaultValue": null,
        "description": "",
        "name": "toRender",
        "parent": {
          "fileName": "react/packages/react/src/utils/testing.tsx",
          "name": "BehavesAsComponent"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/testing.tsx",
            "name": "BehavesAsComponent"
          }
        ],
        "required": false,
        "type": {
          "name": "() => React.ReactElement"
        }
      },
      "options": {
        "defaultValue": null,
        "description": "",
        "name": "options",
        "parent": {
          "fileName": "react/packages/react/src/utils/testing.tsx",
          "name": "BehavesAsComponent"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/utils/testing.tsx",
            "name": "BehavesAsComponent"
          }
        ],
        "required": false,
        "type": {
          "name": "Options"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Divider.tsx",
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "displayName": "Divider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Divider.tsx",
    "description": "Visually separates `Item`s or `Group`s in an `ActionList`.",
    "displayName": "Divider.renderItem",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Divider.tsx",
    "description": "",
    "displayName": "StyledDivider",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Group.tsx",
    "description": "Collects related `Items` in an `ActionList`.",
    "displayName": "Group",
    "methods": [],
    "props": {
      "header": {
        "defaultValue": null,
        "description": "Props for a `Header` to render in the `Group`.",
        "name": "header",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
          "name": "GroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
            "name": "GroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "HeaderProps"
        }
      },
      "groupId": {
        "defaultValue": null,
        "description": "The id of the group.",
        "name": "groupId",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
          "name": "GroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
            "name": "GroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "`Items` to render in the `Group`.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
          "name": "GroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
            "name": "GroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Element[]"
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `Group` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
          "name": "GroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Group.tsx",
            "name": "GroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Header.tsx",
    "description": "Displays the name and description of a `Group`.",
    "displayName": "Header",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "subtle"
        },
        "description": "Style variations. Usage is discretionary.\n\n- `\"filled\"` - Superimposed on a background, offset from nearby content\n- `\"subtle\"` - Relatively less offset from nearby content",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
          "name": "HeaderProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
            "name": "HeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"subtle\" | \"filled\""
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Primary text which names a `Group`.",
        "name": "title",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
          "name": "HeaderProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
            "name": "HeaderProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "auxiliaryText": {
        "defaultValue": null,
        "description": "Secondary text which provides additional information about a `Group`.",
        "name": "auxiliaryText",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
          "name": "HeaderProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
            "name": "HeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Header.tsx",
    "description": "",
    "displayName": "StyledHeader",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Header.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "\"subtle\" | \"filled\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/Item.tsx",
    "description": "",
    "displayName": "ActionList.Item",
    "methods": [],
    "props": {
      "dangerouslySetInnerHtml": {
        "defaultValue": null,
        "description": "",
        "name": "dangerouslySetInnerHtml",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/Item.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.DOMAttributes<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/ActionList/List.tsx",
    "description": "Lists `Item`s, either grouped or ungrouped, with a `Divider` between each `Group`.",
    "displayName": "ActionList",
    "methods": [],
    "props": {
      "groupMetadata": {
        "defaultValue": null,
        "description": "A collection of `Group` props (except `items`), plus a unique group identifier\nand `Group`-level custom `Item` or `Group` renderers.",
        "name": "groupMetadata",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "((Omit<GroupProps, \"items\"> | Omit<Partial<GroupProps> & { renderItem?: RenderItemFn; renderGroup?: ({ header, items, ...props }: GroupProps) => Element; }, \"items\">) & { ...; })[]"
        }
      },
      "items": {
        "defaultValue": null,
        "description": "A collection of `Item` props, plus associated group identifiers\nand `Item`-level custom `Item` renderers.\nA collection of `Item` props and `Item`-level custom `Item` renderers.",
        "name": "items",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "GroupedListProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "GroupedListProps"
          },
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": true,
        "type": {
          "name": "ItemInput[] | ((ItemProps | (Partial<ItemProps> & { renderItem: RenderItemFn; })) & { groupId: string; })[]"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role describing the function of `List` component. `listbox` is a common value.",
        "name": "role",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to attach to the base DOM node of the list",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "renderItem": {
        "defaultValue": null,
        "description": "A `List`-level custom `Item` renderer. Every `Item` within this `List`\nwithout a `Group`-level or `Item`-level custom `Item` renderer will be\nrendered using this function component.",
        "name": "renderItem",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "RenderItemFn"
        }
      },
      "renderGroup": {
        "defaultValue": null,
        "description": "A `List`-level custom `Group` renderer. Every `Group` within this `List`\nwithout a `Group`-level custom `Item` renderer will be rendered using\nthis function component.",
        "name": "renderGroup",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "({ header, items, ...props }: GroupProps) => Element"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variations. Usage is discretionary.\n\n- `\"inset\"` - `List` children are offset (vertically and horizontally) from `List`’s edges\n- `\"full\"` - `List` children are flush (vertically and horizontally) with `List` edges",
        "name": "variant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inset\" | \"full\""
        }
      },
      "selectionVariant": {
        "defaultValue": null,
        "description": "For `Item`s which can be selected, whether `multiple` `Item`s or a `single` `Item` can be selected",
        "name": "selectionVariant",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "\"multiple\" | \"single\""
        }
      },
      "showItemDividers": {
        "defaultValue": null,
        "description": "Whether to display a divider above each `Item` in this `List` when it does not follow a `Header` or `Divider`.",
        "name": "showItemDividers",
        "parent": {
          "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
          "name": "ListPropsBase"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/ActionList/List.tsx",
            "name": "ListPropsBase"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Use the new Label instead. See https://primer.style/react/Button for more details."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/Button/Button.tsx",
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\""
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/Button/ButtonBase.tsx",
    "description": "",
    "displayName": "ButtonBase",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\""
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/Button/ButtonClose.tsx",
    "description": "",
    "displayName": "ButtonClose",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/Button/ButtonDanger.tsx",
    "description": "",
    "displayName": "ButtonDanger",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\""
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/Button/ButtonInvisible.tsx",
    "description": "",
    "displayName": "ButtonInvisible",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\""
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/Button/ButtonOutline.tsx",
    "description": "",
    "displayName": "ButtonOutline",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\""
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/Button/ButtonPrimary.tsx",
    "description": "",
    "displayName": "ButtonPrimary",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\""
        }
      },
      "as": {
        "defaultValue": null,
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/deprecated/Button/ButtonBase.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/node_modules/@types/styled-components/index.d.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "undefined"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/Button/ButtonTableList.tsx",
    "description": "",
    "displayName": "ButtonTableList",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/FilterList/FilterList.tsx",
    "description": "",
    "displayName": "FilterList.Item",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "deprecated": "A new filter component is in progress.\nUntil the new filter component is ready, you can use Button + TextInput + ActionList to reproduce this pattern."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/FilteredSearch/FilteredSearch.tsx",
    "description": "",
    "displayName": "FilteredSearch",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "UnderlineNav is deprecated and will be replaced by the draft `UnderlineNav` in the next major release. See https://primer.style/react/drafts/UnderlineNav2 for more details."
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
    "description": "",
    "displayName": "UnderlineNav.Link",
    "methods": [],
    "props": {
      "actions": {
        "defaultValue": null,
        "description": "",
        "name": "actions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"right\""
        }
      },
      "full": {
        "defaultValue": null,
        "description": "",
        "name": "full",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/deprecated/UnderlineNav/UnderlineNav.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Use the `useSlots` hook instead.\n\ncreateSlots is a factory that can create a\ntypesafe Slots + Slot pair to use in a component definition\nFor example: ActionList.Item uses createSlots to get a Slots wrapper\n+ Slot component that is used by LeadingVisual, Description"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/deprecated/utils/create-slots.tsx",
    "description": "",
    "displayName": "createslots",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/ActionBar/ActionBar.tsx",
    "description": "",
    "displayName": "ActionBar",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Size"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/ActionBar/ActionBar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.AriaAttributes"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/ActionBar/ActionBar.tsx",
    "description": "",
    "displayName": "ActionBarIconButton",
    "methods": [],
    "props": {}
  },
  {
    "tags": {
      "deprecated": "Will be removed in v37 (https://github.com/primer/react/issues/3604)"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/InlineAutocomplete/InlineAutocomplete.tsx",
    "description": "Shows suggestions to complete the current word/phrase the user is actively typing.",
    "displayName": "InlineAutocomplete",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
    "description": "Renders an overlayed list at the given relative coordinates. Handles keyboard navigation\nand accessibility concerns.",
    "displayName": "SuggestionList",
    "methods": [],
    "props": {
      "suggestions": {
        "defaultValue": null,
        "description": "",
        "name": "suggestions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Suggestions"
        }
      },
      "portalName": {
        "defaultValue": null,
        "description": "",
        "name": "portalName",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "triggerCharCoords": {
        "defaultValue": null,
        "description": "",
        "name": "triggerCharCoords",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "CharacterCoordinates"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "",
        "name": "onClose",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      },
      "onCommit": {
        "defaultValue": null,
        "description": "",
        "name": "onCommit",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(suggestion: string) => void"
        }
      },
      "inputRef": {
        "defaultValue": null,
        "description": "",
        "name": "inputRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "React.RefObject<TextInputElement>"
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "",
        "name": "visible",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "tabInsertsSuggestions": {
        "defaultValue": null,
        "description": "",
        "name": "tabInsertsSuggestions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "defaultPlacement": {
        "defaultValue": null,
        "description": "",
        "name": "defaultPlacement",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/InlineAutocomplete/_AutocompleteSuggestions.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "SuggestionsPlacement"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/Actions.tsx",
    "description": "",
    "displayName": "MarkdownEditor.Actions",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/Footer.tsx",
    "description": "",
    "displayName": "MarkdownEditor.Footer",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/Label.tsx",
    "description": "",
    "displayName": "MarkdownEditor.Label",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/Label.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Will be removed in v37 (https://github.com/primer/react/issues/3604)"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
    "description": "Markdown textarea with controls & keyboard shortcuts.",
    "displayName": "MarkdownEditor",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Current value of the editor as a multiline markdown string.",
        "name": "value",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when the value changes.",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(newMarkdown: string) => void"
        }
      },
      "onRenderPreview": {
        "defaultValue": null,
        "description": "Accepts Markdown and returns rendered HTML. To prevent XSS attacks,\nthe HTML should be sanitized and/or come from a trusted source.",
        "name": "onRenderPreview",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "(markdown: string) => Promise<string>"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": false
        },
        "description": "Disable the editor and all related buttons. Users can still switch between preview & edit modes.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Placeholder text to show when the editor is empty. By default, no placeholder will be shown.",
        "name": "placeholder",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxLength": {
        "defaultValue": null,
        "description": "Maximum number of characters the markdown can hold (includes formatting characters like `*`).",
        "name": "maxLength",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fullHeight": {
        "defaultValue": null,
        "description": "Force the editor to take up the full height of the container and disallow resizing. Only\nuse when the container height is tall enough that the user will never want to expand the\ninput further, ie when it takes the full height of the viewport.",
        "name": "fullHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "ID of the describing element.",
        "name": "aria-describedby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewMode": {
        "defaultValue": null,
        "description": "Optionally control the view mode. If uncontrolled, leave this `undefined`.",
        "name": "viewMode",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "MarkdownViewMode"
        }
      },
      "onChangeViewMode": {
        "defaultValue": null,
        "description": "If `viewMode` is controlled, this will be called on change.",
        "name": "onChangeViewMode",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(newViewMode: MarkdownViewMode) => void"
        }
      },
      "onPrimaryAction": {
        "defaultValue": null,
        "description": "Called when the user presses `Ctrl`/`Cmd` + `Enter`. Should almost always be wired to\nthe same event as clicking the primary `actionButton`.",
        "name": "onPrimaryAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "minHeightLines": {
        "defaultValue": {
          "value": 5
        },
        "description": "Minimum number of visible lines of text in the editor.",
        "name": "minHeightLines",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "maxHeightLines": {
        "defaultValue": {
          "value": 35
        },
        "description": "Maximum number of visible lines of text in the editor. Has no effect if `fullHeight = true`.",
        "name": "maxHeightLines",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "emojiSuggestions": {
        "defaultValue": null,
        "description": "Array of all possible emojis to suggest. Leave `undefined` to disable emoji autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
        "name": "emojiSuggestions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "SuggestionOptions<Emoji>"
        }
      },
      "mentionSuggestions": {
        "defaultValue": null,
        "description": "Array of all possible mention suggestions. Leave `undefined` to disable `@`-mention autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
        "name": "mentionSuggestions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "SuggestionOptions<Mentionable>"
        }
      },
      "referenceSuggestions": {
        "defaultValue": null,
        "description": "Array of all possible references to suggest. Leave `undefined` to disable `#`-reference autocomplete.\nFor lazy-loading suggestions, an async function can be provided instead.",
        "name": "referenceSuggestions",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "SuggestionOptions<Reference>"
        }
      },
      "onUploadFile": {
        "defaultValue": null,
        "description": "Uploads a file to a hosting service and returns the URL. If not provided, file uploads\nwill be disabled.",
        "name": "onUploadFile",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(file: File) => Promise<FileUploadResult>"
        }
      },
      "acceptedFileTypes": {
        "defaultValue": null,
        "description": "Array of allowed file types. If `onUploadFile` is defined but this array is not, all\nfile types will be accepted. You can still reject file types by rejecting the `onUploadFile`\npromise, but setting this array provides a better user experience by preventing the\nupload in the first place.",
        "name": "acceptedFileTypes",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FileType[]"
        }
      },
      "monospace": {
        "defaultValue": {
          "value": false
        },
        "description": "Control whether the editor font is monospace.",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "required": {
        "defaultValue": {
          "value": false
        },
        "description": "Control whether the input is required.",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The name that will be given to the `textarea`.",
        "name": "name",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "savedReplies": {
        "defaultValue": null,
        "description": "To enable the saved replies feature, provide an array of replies.",
        "name": "savedReplies",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "SavedReply[]"
        }
      },
      "pasteUrlsAsPlainText": {
        "defaultValue": {
          "value": false
        },
        "description": "Control whether URLs are pasted as plain text instead of as formatted links (if the\nuser has selected some text before pasting). Defaults to `false` (URLs will paste as\nlinks). This should typically be controlled by user settings.\n\nUsers can always toggle this behavior by holding `shift` when pasting.",
        "name": "pasteUrlsAsPlainText",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/MarkdownEditor.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/Toolbar.tsx",
    "description": "",
    "displayName": "MarkdownEditor.DefaultToolbarButtons",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/_ErrorMessage.tsx",
    "description": "",
    "displayName": "ErrorMessage",
    "methods": [],
    "props": {
      "message": {
        "defaultValue": null,
        "description": "",
        "name": "message",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_ErrorMessage.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/_FormattingTools.tsx",
    "description": "Renders an invisible `markdown-toolbar-element` that provides formatting actions to the\neditor. This is a hacky way of using the library, but it allows us to use the built-in\nbehavior without having to actually display the inflexible toolbar element. It also means\nwe can still use the formatting tools even if the consumer hides the default toolbar\nbuttons (ie, by keyboard shortcut).",
    "displayName": "FormattingTools",
    "methods": [],
    "props": {
      "forInputId": {
        "defaultValue": null,
        "description": "",
        "name": "forInputId",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_FormattingTools.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
    "description": "",
    "displayName": "MarkdownInput",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ChangeEventHandler<HTMLTextAreaElement>"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyDown",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.KeyboardEventHandler<HTMLTextAreaElement>"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Apply inactive visual appearance to the Textarea",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "",
        "name": "placeholder",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "maxLength": {
        "defaultValue": null,
        "description": "",
        "name": "maxLength",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fullHeight": {
        "defaultValue": null,
        "description": "",
        "name": "fullHeight",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isDraggedOver": {
        "defaultValue": null,
        "description": "",
        "name": "isDraggedOver",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "emojiSuggestions": {
        "defaultValue": null,
        "description": "",
        "name": "emojiSuggestions",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SuggestionOptions<Emoji>"
        }
      },
      "mentionSuggestions": {
        "defaultValue": null,
        "description": "",
        "name": "mentionSuggestions",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SuggestionOptions<Mentionable>"
        }
      },
      "referenceSuggestions": {
        "defaultValue": null,
        "description": "",
        "name": "referenceSuggestions",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SuggestionOptions<Reference>"
        }
      },
      "minHeightLines": {
        "defaultValue": null,
        "description": "",
        "name": "minHeightLines",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "maxHeightLines": {
        "defaultValue": null,
        "description": "",
        "name": "maxHeightLines",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "",
        "name": "monospace",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "pasteUrlsAsPlainText": {
        "defaultValue": null,
        "description": "",
        "name": "pasteUrlsAsPlainText",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "Use this prop to control visibility instead of unmounting, so the undo stack and custom height are preserved.",
        "name": "visible",
        "parent": {
          "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
          "name": "MarkdownInputProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_MarkdownInput.tsx",
            "name": "MarkdownInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "block": {
        "defaultValue": null,
        "description": "Block",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "resize": {
        "defaultValue": null,
        "description": "Allows resizing of the textarea",
        "name": "resize",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"none\" | \"both\" | \"horizontal\" | \"vertical\""
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "apply a high contrast color to background",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "Indicates whether the Textarea validation state",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/Textarea/Textarea.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/_ToolbarButton.tsx",
    "description": "",
    "displayName": "MarkdownEditor.ToolbarButton",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/_ViewSwitch.tsx",
    "description": "",
    "displayName": "ViewSwitch",
    "methods": [],
    "props": {
      "selectedView": {
        "defaultValue": null,
        "description": "",
        "name": "selectedView",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_ViewSwitch.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "MarkdownViewMode"
        }
      },
      "onViewSelect": {
        "defaultValue": null,
        "description": "",
        "name": "onViewSelect",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_ViewSwitch.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(view: MarkdownViewMode) => void"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_ViewSwitch.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onLoadPreview": {
        "defaultValue": null,
        "description": "Called when the preview should be loaded.",
        "name": "onLoadPreview",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownEditor/_ViewSwitch.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {
      "deprecated": "Will be removed in v37 (https://github.com/primer/react/issues/3604)"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
    "description": "",
    "displayName": "MarkdownViewer",
    "methods": [],
    "props": {
      "loading": {
        "defaultValue": {
          "value": false
        },
        "description": "Show a loading spinner instead of content.",
        "name": "loading",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dangerousRenderedHTML": {
        "defaultValue": null,
        "description": "Set the rendered HTML of the viewer. To prevent XSS, ensure that the source of this\nHTML is trusted!",
        "name": "dangerousRenderedHTML",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "{ __html: string | TrustedHTML; }"
        }
      },
      "onLinkClick": {
        "defaultValue": null,
        "description": "Called when the user clicks a link element. This can be used to intercept the click\nand provide custom routing. Note that this is a native HTML `MouseEvent` and not a\n`React.ClickEvent`.",
        "name": "onLinkClick",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent) => void"
        }
      },
      "openLinksInNewTab": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "openLinksInNewTab",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "markdownValue": {
        "defaultValue": {
          "value": ""
        },
        "description": "The markdown the HTML was rendered from. This is not used for viewing, only as a source\nfor change events.",
        "name": "markdownValue",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Called when the user interacts and updates the Markdown. The rendered Markdown is\nupdated eagerly - if the request fails, a rejected Promise should be returned by\nthis handler. In that case, the viewer will revert the visual change.\n\nIf the change is handled by an async API request (as it typically will be in production\ncode), the viewer should be `disabled` while the request is pending to avoid conflicts.\nTo allow users to check multiple boxes rapidly, the API request should be debounced (an\nideal debounce duration is about 1 second).",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(markdown: string) => void | Promise<void>"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": false
        },
        "description": "Control whether interaction is disabled.",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/drafts/MarkdownViewer/MarkdownViewer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
    "description": "",
    "displayName": "SelectPanel",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "warning"
        },
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"anchored\" | \"modal\" | ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">"
        }
      },
      "selectionVariant": {
        "defaultValue": {
          "value": "multiple"
        },
        "description": "",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "defaultOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "",
        "name": "anchorRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLButtonElement>"
        }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onCancel",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onClearSelection": {
        "defaultValue": null,
        "description": "",
        "name": "onClearSelection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onSubmit": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmit",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event?: React.FormEvent<HTMLFormElement>) => void"
        }
      },
      "width": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\""
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"fit-content\""
        }
      },
      "maxHeight": {
        "defaultValue": {
          "value": "large"
        },
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xlarge\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/SelectPanel2/index.tsx",
    "description": "",
    "displayName": "SelectPanel",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "",
        "name": "description",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "warning"
        },
        "description": "",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"anchored\" | \"modal\" | ResponsiveValue<\"anchored\" | \"modal\", \"full-screen\" | \"bottom-sheet\">"
        }
      },
      "selectionVariant": {
        "defaultValue": {
          "value": "multiple"
        },
        "description": "",
        "name": "selectionVariant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultOpen": {
        "defaultValue": {
          "value": false
        },
        "description": "",
        "name": "defaultOpen",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "anchorRef": {
        "defaultValue": null,
        "description": "",
        "name": "anchorRef",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLButtonElement>"
        }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onCancel",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onClearSelection": {
        "defaultValue": null,
        "description": "",
        "name": "onClearSelection",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onSubmit": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmit",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event?: React.FormEvent<HTMLFormElement>) => void"
        }
      },
      "width": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"auto\" | \"xlarge\" | \"xxlarge\""
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"fit-content\""
        }
      },
      "maxHeight": {
        "defaultValue": {
          "value": "large"
        },
        "description": "",
        "name": "maxHeight",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/SelectPanel2/SelectPanel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"large\" | \"medium\" | \"fit-content\" | \"xlarge\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/TabPanels/TabPanels.tsx",
    "description": "",
    "displayName": "TabPanels.Tab",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/TabPanels/TabPanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/TabPanels/TabPanels.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/drafts/TabPanels/TabPanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "declarations": [
          {
            "fileName": "react/packages/react/src/drafts/TabPanels/TabPanels.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/drafts/TabPanels/TabPanels.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/Alert.tsx",
    "description": "",
    "displayName": "Alert",
    "methods": [],
    "props": {
      "politeness": {
        "defaultValue": {
          "value": "polite"
        },
        "description": "The politeness level to use for the announcement",
        "name": "politeness",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/Announce.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"assertive\" | \"polite\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/Announce.tsx",
    "description": "`Announce` is a component that will announce the text content of the\n`children` passed in to screen readers using the given politeness level. It\nwill also announce any changes to the text content of `children`",
    "displayName": "Announce",
    "methods": [],
    "props": {
      "politeness": {
        "defaultValue": {
          "value": "polite"
        },
        "description": "The politeness level to use for the announcement",
        "name": "politeness",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/Announce.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"assertive\" | \"polite\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/ButtonReset.tsx",
    "description": "Provides an unstyled button that can be styled as-needed for components",
    "displayName": "Button",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/ConditionalWrapper.tsx",
    "description": "",
    "displayName": "ConditionalWrapper",
    "methods": [],
    "props": {
      "if": {
        "defaultValue": null,
        "description": "",
        "name": "if",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/ConditionalWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/InputCaption.tsx",
    "description": "",
    "displayName": "InputCaption",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "The unique identifier used to associate the caption with an input",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputCaption.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the input associated with this caption is disabled",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputCaption.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/InputLabel.tsx",
    "description": "",
    "displayName": "InputLabel",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "",
        "name": "required",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "visuallyHidden": {
        "defaultValue": null,
        "description": "",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "htmlFor": {
        "defaultValue": null,
        "description": "",
        "name": "htmlFor",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "as": {
        "defaultValue": {
          "value": "label"
        },
        "description": "",
        "name": "as",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "react/packages/react/src/internal/components/InputLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"label\" | \"legend\" | \"span\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/InputValidation.tsx",
    "description": "",
    "displayName": "InputValidation",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/InputValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/LiveRegion.tsx",
    "description": "",
    "displayName": "LiveRegion",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/LiveRegion.tsx",
    "description": "",
    "displayName": "Message",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/LiveRegion.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/ScrollableRegion.tsx",
    "description": "",
    "displayName": "ScrollableRegion",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/Status.tsx",
    "description": "",
    "displayName": "Status",
    "methods": [],
    "props": {
      "politeness": {
        "defaultValue": {
          "value": "polite"
        },
        "description": "The politeness level to use for the announcement",
        "name": "politeness",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/Announce.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "\"assertive\" | \"polite\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputInnerAction.tsx",
    "description": "",
    "displayName": "TextInputInnerAction",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
    "description": "",
    "displayName": "TextInputInnerVisualSlot",
    "methods": [],
    "props": {
      "hasLoadingIndicator": {
        "defaultValue": null,
        "description": "Whether the input is expected to ever show a loading indicator",
        "name": "hasLoadingIndicator",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "showLoadingIndicator": {
        "defaultValue": null,
        "description": "Whether the to show the loading indicator",
        "name": "showLoadingIndicator",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "visualPosition": {
        "defaultValue": null,
        "description": "Which side of this visual is being rendered",
        "name": "visualPosition",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputInnerVisualSlot.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "\"leading\" | \"trailing\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputWrapper.tsx",
    "description": "",
    "displayName": "TextInputBaseWrapper",
    "methods": [],
    "props": {
      "monospace": {
        "defaultValue": null,
        "description": "",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "block": {
        "defaultValue": null,
        "description": "",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hasTrailingAction": {
        "defaultValue": null,
        "description": "",
        "name": "hasTrailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isInputFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isInputFocused",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/TextInputWrapper.tsx",
    "description": "",
    "displayName": "TextInputWrapper",
    "methods": [],
    "props": {
      "block": {
        "defaultValue": null,
        "description": "",
        "name": "block",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "contrast": {
        "defaultValue": null,
        "description": "",
        "name": "contrast",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hasTrailingAction": {
        "defaultValue": null,
        "description": "",
        "name": "hasTrailingAction",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isInputFocused": {
        "defaultValue": null,
        "description": "",
        "name": "isInputFocused",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "monospace": {
        "defaultValue": null,
        "description": "",
        "name": "monospace",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "validationStatus": {
        "defaultValue": null,
        "description": "",
        "name": "validationStatus",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/TextInputWrapper.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/UnstyledTextInput.tsx",
    "description": "",
    "displayName": "UnstyledTextInput",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/ValidationAnimationContainer.tsx",
    "description": "",
    "displayName": "ValidationAnimationContainer",
    "methods": [],
    "props": {
      "show": {
        "defaultValue": null,
        "description": "",
        "name": "show",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/ValidationAnimationContainer.tsx",
          "name": "Props"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/ValidationAnimationContainer.tsx",
            "name": "Props"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {
      "see": "https://www.scottohara.me/blog/2023/03/21/visually-hidden-hack.html"
    },
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/VisuallyHidden.tsx",
    "description": "Provides a component that implements the \"visually hidden\" technique. This is\nanalagous to the common `sr-only` class. Children that are rendered inside\nthis component will not be visible but will be available to screen readers.\n\nNote: if this component, or a descendant, has focus then this component will\nno longer be visually hidden.",
    "displayName": "VisuallyHidden",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/suggestions/_useEmojiSuggestions.tsx",
    "description": "",
    "displayName": "useEmojiSuggestions",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/suggestions/_useMentionSuggestions.tsx",
    "description": "",
    "displayName": "useMentionSuggestions",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/drafts/MarkdownEditor/suggestions/_useReferenceSuggestions.tsx",
    "description": "",
    "displayName": "useReferenceSuggestions",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
    "description": "",
    "displayName": "CheckboxOrRadioGroup",
    "methods": [],
    "props": {
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Used when associating the input group with a label other than `CheckboxOrRadioGroup.Label`",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether the input group allows user input",
        "name": "disabled",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for this input group. Used to associate the label, validation text, and caption text.\nYou may want a custom ID to make it easier to select elements in integration tests.",
        "name": "id",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "required": {
        "defaultValue": {
          "value": false
        },
        "description": "If true, the user must make a selection before the owning form can be submitted",
        "name": "required",
        "parent": {
          "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
          "name": "CheckboxOrRadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroup.tsx",
            "name": "CheckboxOrRadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupCaption.tsx",
    "description": "",
    "displayName": "CheckboxOrRadioGroupCaption",
    "methods": [],
    "props": {
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupLabel.tsx",
    "description": "",
    "displayName": "CheckboxOrRadioGroupLabel",
    "methods": [],
    "props": {
      "visuallyHidden": {
        "defaultValue": {
          "value": false
        },
        "description": "Whether to visually hide the fieldset legend",
        "name": "visuallyHidden",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupLabel.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "/Users/mperrotti/work-dir/react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupValidation.tsx",
    "description": "",
    "displayName": "CheckboxOrRadioGroupValidation",
    "methods": [],
    "props": {
      "variant": {
        "defaultValue": null,
        "description": "Changes the visual style to match the validation status",
        "name": "variant",
        "declarations": [
          {
            "fileName": "react/packages/react/src/internal/components/CheckboxOrRadioGroup/CheckboxOrRadioGroupValidation.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "FormValidationStatus"
        }
      },
      "sx": {
        "defaultValue": null,
        "description": "",
        "name": "sx",
        "parent": {
          "fileName": "react/packages/react/src/sx.ts",
          "name": "SxProp"
        },
        "declarations": [
          {
            "fileName": "react/packages/react/src/sx.ts",
            "name": "SxProp"
          }
        ],
        "required": false,
        "type": {
          "name": "BetterSystemStyleObject"
        }
      }
    }
  }
]