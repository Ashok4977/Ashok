const colors = {
  canvasDefaultTransparent: 'var(--bgColor-transparent)',
  pageHeaderBg: 'var(--page-header-bgColor)',
  marketingIcon: {
    primary: 'var(--color-marketing-icon-primary)',
    secondary: 'var(--color-marketing-icon-secondary)',
  },
  diffBlob: {
    addition: {
      numText: 'var(--diffBlob-addition-fgColor-num)',
      fg: 'var(--diffBlob-addition-fgColor-text)',
      numBg: 'var(--diffBlob-addition-bgColor-num)',
      lineBg: 'var(--diffBlob-addition-bgColor-line)',
      wordBg: 'var(--diffBlob-addition-bgColor-word)',
    },
    deletion: {
      numText: 'var(--diffBlob-deletion-fgColor-num)',
      fg: 'var(--diffBlob-deletion-fgColor-text)',
      numBg: 'var(--diffBlob-deletion-bgColor-num)',
      lineBg: 'var(--diffBlob-deletion-bgColor-line)',
      wordBg: 'var(--diffBlob-deletion-bgColor-word)',
    },
    hunk: {numBg: 'var(--diffBlob-hunk-bgColor-num)'},
    expander: {icon: 'var(--diffBlob-expander-iconColor)'},
    selectedLineHighlightMixBlendMode: 'var(--color-diff-blob-selected-line-highlight-mix-blend-mode)',
  },
  diffstat: {
    deletionBorder: 'var(--color-diffstat-deletion-border)',
    additionBorder: 'var(--color-diffstat-addition-border)',
    additionBg: 'var(undefined)',
  },
  searchKeyword: {hl: 'var(--highlight-neutral-bgColor)'},
  prettylights: {
    syntax: {
      comment: 'var(--color-prettylights-syntax-comment)',
      constant: 'var(--color-prettylights-syntax-constant)',
      entity: 'var(--color-prettylights-syntax-entity)',
      storageModifierImport: 'var(--color-prettylights-syntax-storage-modifier-import)',
      entityTag: 'var(--color-prettylights-syntax-entity-tag)',
      keyword: 'var(--color-prettylights-syntax-keyword)',
      string: 'var(--color-prettylights-syntax-string)',
      variable: 'var(--color-prettylights-syntax-variable)',
      brackethighlighterUnmatched: 'var(--color-prettylights-syntax-brackethighlighter-unmatched)',
      invalidIllegalText: 'var(--color-prettylights-syntax-invalid-illegal-text)',
      invalidIllegalBg: 'var(--color-prettylights-syntax-invalid-illegal-bg)',
      carriageReturnText: 'var(--color-prettylights-syntax-carriage-return-text)',
      carriageReturnBg: 'var(--color-prettylights-syntax-carriage-return-bg)',
      stringRegexp: 'var(--color-prettylights-syntax-string-regexp)',
      markupList: 'var(--color-prettylights-syntax-markup-list)',
      markupHeading: 'var(--color-prettylights-syntax-markup-heading)',
      markupItalic: 'var(--color-prettylights-syntax-markup-italic)',
      markupBold: 'var(--color-prettylights-syntax-markup-bold)',
      markupDeletedText: 'var(--color-prettylights-syntax-markup-deleted-text)',
      markupDeletedBg: 'var(--color-prettylights-syntax-markup-deleted-bg)',
      markupInsertedText: 'var(--color-prettylights-syntax-markup-inserted-text)',
      markupInsertedBg: 'var(--color-prettylights-syntax-markup-inserted-bg)',
      markupChangedText: 'var(--color-prettylights-syntax-markup-changed-text)',
      markupChangedBg: 'var(--color-prettylights-syntax-markup-changed-bg)',
      markupIgnoredText: 'var(--color-prettylights-syntax-markup-ignored-text)',
      markupIgnoredBg: 'var(--color-prettylights-syntax-markup-ignored-bg)',
      metaDiffRange: 'var(--color-prettylights-syntax-meta-diff-range)',
      brackethighlighterAngle: 'var(--color-prettylights-syntax-brackethighlighter-angle)',
      sublimelinterGutterMark: 'var(--color-prettylights-syntax-sublimelinter-gutter-mark)',
      constantOtherReferenceLink: 'var(--color-prettylights-syntax-constant-other-reference-link)',
    },
  },
  codemirror: {
    text: 'var(--codeMirror-fgColor)',
    bg: 'var(--codeMirror-bgColor)',
    guttersBg: 'var(--codeMirror-gutters-bgColor)',
    guttermarkerText: 'var(--codeMirror-gutterMarker-fgColor-default)',
    guttermarkerSubtleText: 'var(--codeMirror-gutterMarker-fgColor-muted)',
    linenumberText: 'var(--codeMirror-lineNumber-fgColor)',
    cursor: 'var(--codeMirror-cursor-fgColor)',
    selectionBg: 'var(--codeMirror-selection-bgColor)',
    activelineBg: 'var(--codeMirror-activeline-bgColor)',
    matchingbracketText: 'var(--codeMirror-matchingBracket-fgColor)',
    linesBg: 'var(--codeMirror-lines-bgColor)',
    syntax: {
      comment: 'var(--codeMirror-syntax-fgColor-comment)',
      constant: 'var(--codeMirror-syntax-fgColor-constant)',
      entity: 'var(--codeMirror-syntax-fgColor-entity)',
      keyword: 'var(--codeMirror-syntax-fgColor-keyword)',
      storage: 'var(--codeMirror-syntax-fgColor-storage)',
      string: 'var(--codeMirror-syntax-fgColor-string)',
      support: 'var(--codeMirror-syntax-fgColor-support)',
      variable: 'var(--codeMirror-syntax-fgColor-variable)',
    },
  },
  checks: {
    bg: 'var(--color-checks-bg)',
    runBorderWidth: 'var(--color-checks-run-border-width)',
    containerBorderWidth: 'var(--color-checks-container-border-width)',
    textPrimary: 'var(--color-checks-text-primary)',
    textSecondary: 'var(--color-checks-text-secondary)',
    textLink: 'var(--color-checks-text-link)',
    btnIcon: 'var(--color-checks-btn-icon)',
    btnHoverIcon: 'var(--color-checks-btn-hover-icon)',
    btnHoverBg: 'var(--color-checks-btn-hover-bg)',
    inputText: 'var(--color-checks-input-text)',
    inputPlaceholderText: 'var(--color-checks-input-placeholder-text)',
    inputFocusText: 'var(--color-checks-input-focus-text)',
    inputBg: 'var(--color-checks-input-bg)',
    inputShadow: 'var(--color-checks-input-shadow)',
    donutError: 'var(--color-checks-donut-error)',
    donutPending: 'var(--color-checks-donut-pending)',
    donutSuccess: 'var(--color-checks-donut-success)',
    donutNeutral: 'var(--color-checks-donut-neutral)',
    dropdownText: 'var(--color-checks-dropdown-text)',
    dropdownBg: 'var(--color-checks-dropdown-bg)',
    dropdownBorder: 'var(--color-checks-dropdown-border)',
    dropdownShadow: 'var(--color-checks-dropdown-shadow)',
    dropdownHoverText: 'var(--color-checks-dropdown-hover-text)',
    dropdownHoverBg: 'var(--color-checks-dropdown-hover-bg)',
    dropdownBtnHoverText: 'var(--color-checks-dropdown-btn-hover-text)',
    dropdownBtnHoverBg: 'var(--color-checks-dropdown-btn-hover-bg)',
    scrollbarThumbBg: 'var(--color-checks-scrollbar-thumb-bg)',
    headerLabelText: 'var(--color-checks-header-label-text)',
    headerLabelOpenText: 'var(--color-checks-header-label-open-text)',
    headerBorder: 'var(--color-checks-header-border)',
    headerIcon: 'var(--color-checks-header-icon)',
    lineText: 'var(--color-checks-line-text)',
    lineNumText: 'var(--color-checks-line-num-text)',
    lineTimestampText: 'var(--color-checks-line-timestamp-text)',
    lineHoverBg: 'var(--color-checks-line-hover-bg)',
    lineSelectedBg: 'var(--color-checks-line-selected-bg)',
    lineSelectedNumText: 'var(--color-checks-line-selected-num-text)',
    lineDtFmText: 'var(--color-checks-line-dt-fm-text)',
    lineDtFmBg: 'var(--color-checks-line-dt-fm-bg)',
    gateBg: 'var(--color-checks-gate-bg)',
    gateText: 'var(--color-checks-gate-text)',
    gateWaitingText: 'var(--color-checks-gate-waiting-text)',
    stepHeaderOpenBg: 'var(--color-checks-step-header-open-bg)',
    stepErrorText: 'var(--color-checks-step-error-text)',
    stepWarningText: 'var(--color-checks-step-warning-text)',
    loglineText: 'var(--color-checks-logline-text)',
    loglineNumText: 'var(--color-checks-logline-num-text)',
    loglineDebugText: 'var(--color-checks-logline-debug-text)',
    loglineErrorText: 'var(--color-checks-logline-error-text)',
    loglineErrorNumText: 'var(--color-checks-logline-error-num-text)',
    loglineErrorBg: 'var(--color-checks-logline-error-bg)',
    loglineWarningText: 'var(--color-checks-logline-warning-text)',
    loglineWarningNumText: 'var(--color-checks-logline-warning-num-text)',
    loglineWarningBg: 'var(--color-checks-logline-warning-bg)',
    loglineCommandText: 'var(--color-checks-logline-command-text)',
    loglineSectionText: 'var(--color-checks-logline-section-text)',
    ansi: {
      black: 'var(--color-checks-ansi-black)',
      blackBright: 'var(--color-checks-ansi-black-bright)',
      white: 'var(--color-checks-ansi-white)',
      whiteBright: 'var(--color-checks-ansi-white-bright)',
      gray: 'var(--color-checks-ansi-gray)',
      red: 'var(--color-checks-ansi-red)',
      redBright: 'var(--color-checks-ansi-red-bright)',
      green: 'var(--color-checks-ansi-green)',
      greenBright: 'var(--color-checks-ansi-green-bright)',
      yellow: 'var(--color-checks-ansi-yellow)',
      yellowBright: 'var(--color-checks-ansi-yellow-bright)',
      blue: 'var(--color-checks-ansi-blue)',
      blueBright: 'var(--color-checks-ansi-blue-bright)',
      magenta: 'var(--color-checks-ansi-magenta)',
      magentaBright: 'var(--color-checks-ansi-magenta-bright)',
      cyan: 'var(--color-checks-ansi-cyan)',
      cyanBright: 'var(--color-checks-ansi-cyan-bright)',
    },
  },
  project: {
    headerBg: 'var(--color-project-header-bg)',
    sidebarBg: 'var(--color-project-sidebar-bg)',
    gradientIn: 'var(--color-project-gradient-in)',
    gradientOut: 'var(--color-project-gradient-out)',
  },
  mktg: {btn: {bg: 'var(--color-mktg-btn-bg)', shadow: [Object]}},
  control: {borderColor: {emphasis: 'var(--control-borderColor-emphasis)'}},
  avatar: {
    bg: 'var(--avatar-bgColor)',
    border: 'var(--avatar-borderColor)',
    stackFade: 'var(--avatarStack-fade-bgColor-default)',
    stackFadeMore: 'var(--avatarStack-fade-bgColor-muted)',
    childShadow: 'var(--avatar-shadow)',
  },
  topicTag: {border: 'var(--topicTag-borderColor)'},
  counter: {border: 'var(--counter-borderColor)'},
  selectMenu: {
    backdropBorder: 'var(--selectMenu-borderColor)',
    tapHighlight: 'var(--control-bgColor-active)',
    tapFocusBg: 'var(--selectMenu-bgColor-active)',
  },
  overlay: {
    shadow: 'var(--shadow-floating-small)',
    backdrop: 'var(--overlay-backdrop-bgColor)',
  },
  header: {
    text: 'var(--header-fgColor-default)',
    bg: 'var(--header-bgColor)',
    divider: 'var(--header-borderColor-divider)',
    logo: 'var(--header-fgColor-logo)',
  },
  headerSearch: {
    bg: 'var(--headerSearch-bgColor)',
    border: 'var(--headerSearch-borderColor)',
  },
  sidenav: {selectedBg: 'var(--sideNav-bgColor-selected)'},
  menu: {bgActive: 'var(--menu-bgColor-active)'},
  input: {disabledBg: 'var(--control-bgColor-disabled)'},
  timeline: {badgeBg: 'var(--timelineBadge-bgColor)'},
  ansi: {
    black: 'var(--color-ansi-black)',
    blackBright: 'var(--color-ansi-black-bright)',
    white: 'var(--color-ansi-white)',
    whiteBright: 'var(--color-ansi-white-bright)',
    gray: 'var(--color-ansi-gray)',
    red: 'var(--color-ansi-red)',
    redBright: 'var(--color-ansi-red-bright)',
    green: 'var(--color-ansi-green)',
    greenBright: 'var(--color-ansi-green-bright)',
    yellow: 'var(--color-ansi-yellow)',
    yellowBright: 'var(--color-ansi-yellow-bright)',
    blue: 'var(--color-ansi-blue)',
    blueBright: 'var(--color-ansi-blue-bright)',
    magenta: 'var(--color-ansi-magenta)',
    magentaBright: 'var(--color-ansi-magenta-bright)',
    cyan: 'var(--color-ansi-cyan)',
    cyanBright: 'var(--color-ansi-cyan-bright)',
  },
  btn: {
    text: 'var(--button-default-fgColor-rest)',
    bg: 'var(--button-default-bgColor-rest)',
    border: 'var(--button-default-borderColor-rest)',
    shadow: 'var(--button-default-shadow-resting)',
    insetShadow: 'var(--button-default-shadow-inset)',
    hoverBg: 'var(--button-default-bgColor-hover)',
    hoverBorder: 'var(--button-default-borderColor-hover)',
    activeBg: 'var(--button-default-bgColor-active)',
    activeBorder: 'var(--button-default-borderColor-active)',
    selectedBg: 'var(--button-default-bgColor-selected)',
    counterBg: 'var(--buttonCounter-default-bgColor-rest)',
    primary: {
      text: 'var(--button-primary-fgColor-rest)',
      bg: 'var(--button-primary-bgColor-rest)',
      border: 'var(--button-primary-borderColor-rest)',
      shadow: 'var(--shadow-resting-small)',
      insetShadow: 'var(--shadow-highlight)',
      hoverBg: 'var(--button-primary-bgColor-hover)',
      hoverBorder: 'var(--button-primary-borderColor-hover)',
      selectedBg: 'var(--button-primary-bgColor-active)',
      selectedShadow: 'var(--button-primary-shadow-selected)',
      disabledText: 'var(--button-primary-fgColor-disabled)',
      disabledBg: 'var(--button-primary-bgColor-disabled)',
      disabledBorder: 'var(--button-primary-borderColor-disabled)',
      icon: 'var(--button-primary-iconColor-rest)',
      counterBg: 'var(--buttonCounter-primary-bgColor-rest)',
    },
    outline: {
      text: 'var(--button-outline-fgColor-rest)',
      hoverText: 'var(--button-outline-fgColor-hover)',
      hoverBg: 'var(--button-outline-bgColor-hover)',
      hoverBorder: 'var(--button-outline-borderColor-hover)',
      hoverShadow: 'var(--shadow-resting-small)',
      hoverInsetShadow: 'var(--shadow-highlight)',
      hoverCounterBg: 'var(--buttonCounter-outline-bgColor-hover)',
      selectedText: 'var(--button-outline-fgColor-active)',
      selectedBg: 'var(--button-outline-bgColor-active)',
      selectedBorder: 'var(--button-outline-borderColor-active)',
      selectedShadow: 'var(--button-outline-shadow-selected)',
      disabledText: 'var(--button-outline-fgColor-disabled)',
      disabledBg: 'var(--button-outline-bgColor-disabled)',
      disabledCounterBg: 'var(--buttonCounter-outline-bgColor-disabled)',
      counterBg: 'var(--buttonCounter-outline-bgColor-rest)',
      counterFg: 'var(--buttonCounter-outline-fgColor-rest)',
      hoverCounterFg: 'var(--buttonCounter-outline-fgColor-hover)',
      disabledCounterFg: 'var(--buttonCounter-outline-fgColor-disabled)',
    },
    danger: {
      text: 'var(--button-danger-fgColor-rest)',
      hoverText: 'var(--button-danger-fgColor-hover)',
      hoverBg: 'var(--button-danger-bgColor-hover)',
      hoverBorder: 'var(--button-danger-borderColor-hover)',
      hoverShadow: 'var(--shadow-resting-small)',
      hoverInsetShadow: 'var(--shadow-highlight)',
      hoverCounterBg: 'var(--buttonCounter-danger-bgColor-hover)',
      selectedText: 'var(--button-danger-fgColor-active)',
      selectedBg: 'var(--button-danger-bgColor-active)',
      selectedBorder: 'var(--button-danger-borderColor-active)',
      selectedShadow: 'var(--button-danger-shadow-selected)',
      disabledText: 'var(--button-danger-fgColor-disabled)',
      disabledBg: 'var(--button-danger-bgColor-disabled)',
      disabledCounterBg: 'var(--buttonCounter-danger-bgColor-disabled)',
      counterBg: 'var(--buttonCounter-danger-bgColor-rest)',
      icon: 'var(--button-danger-iconColor-rest)',
      hoverIcon: 'var(--button-danger-iconColor-hover)',
      counterFg: 'var(--buttonCounter-danger-fgColor-rest)',
      hoverCounterFg: 'var(--buttonCounter-danger-fgColor-hover)',
      disabledCounterFg: 'var(--buttonCounter-danger-fgColor-disabled)',
    },
    inactive: {
      bg: 'var(--button-inactive-bgColor-rest)',
      text: 'var(--button-inactive-fgColor-rest)',
    },
  },
  underlinenav: {
    icon: 'var(--underlineNav-iconColor-rest)',
    borderHover: 'var(--underlineNav-borderColor-hover)',
  },
  actionListItem: {
    inlineDivider: 'var(--borderColor-muted)',
    default: {
      hoverBg: 'var(--control-transparent-bgColor-hover)',
      hoverBorder: 'var(--control-transparent-borderColor-hover)',
      activeBg: 'var(--control-transparent-bgColor-active)',
      activeBorder: 'var(--control-transparent-borderColor-active)',
      selectedBg: 'var(--control-transparent-bgColor-selected)',
    },
    danger: {
      hoverBg: 'var(--control-danger-bgColor-hover)',
      activeBg: 'var(--control-danger-bgColor-active)',
      hoverText: 'var(--control-danger-fgColor-hover)',
    },
  },
  switchTrack: {
    bg: 'var(--controlTrack-bgColor-rest)',
    hoverBg: 'var(--controlTrack-bgColor-hover)',
    activeBg: 'var(--controlTrack-bgColor-active)',
    disabledBg: 'var(--controlTrack-bgColor-disabled)',
    fg: 'var(--controlTrack-fgColor-rest)',
    disabledFg: 'var(--controlTrack-fgColor-disabled)',
    border: 'var(--controlTrack-borderColor-rest)',
    checked: {
      bg: 'var(--control-checked-bgColor-rest)',
      hoverBg: 'var(--control-checked-bgColor-hover)',
      activeBg: 'var(--control-checked-bgColor-active)',
      fg: 'var(--control-checked-fgColor-rest)',
      disabledFg: 'var(--control-checked-fgColor-disabled)',
      border: 'var(--borderColor-transparent)',
    },
  },
  switchKnob: {
    bg: 'var(--controlKnob-bgColor-rest)',
    disabledBg: 'var(--controlKnob-bgColor-disabled)',
    border: 'var(--controlKnob-borderColor-rest)',
    checked: {
      bg: 'var(--controlKnob-bgColor-checked)',
      disabledBg: 'var(--controlKnob-bgColor-disabled)',
      border: 'var(--controlKnob-borderColor-checked)',
    },
  },
  segmentedControl: {
    bg: 'var(--controlTrack-bgColor-rest)',
    button: {
      bg: 'var(--controlKnob-bgColor-rest)',
      hover: [Object],
      active: [Object],
      selected: [Object],
    },
  },
  treeViewItem: {
    chevron: {hoverBg: 'var(--control-transparent-bgColor-hover)'},
    directory: {fill: 'var(--treeViewItem-leadingVisual-bgColor-rest)'},
  },
  fg: {
    default: 'var(--fgColor-default)',
    muted: 'var(--fgColor-muted)',
    subtle: 'var(--fgColor-muted)',
    onEmphasis: 'var(--fgColor-onEmphasis)',
  },
  canvas: {
    default: 'var(--bgColor-default)',
    overlay: 'var(--overlay-bgColor)',
    inset: 'var(--bgColor-inset)',
    subtle: 'var(--bgColor-muted)',
  },
  border: {
    default: 'var(--borderColor-default)',
    muted: 'var(--borderColor-muted)',
    subtle: 'var(--borderColor-muted)',
  },
  shadow: {
    small: 'var(--shadow-resting-small)',
    medium: 'var(--shadow-resting-medium)',
    large: 'var(--shadow-floating-large)',
    extraLarge: 'var(--shadow-floating-xlarge)',
  },
  neutral: {
    emphasisPlus: 'var(--bgColor-emphasis)',
    emphasis: 'var(--bgColor-neutral-emphasis)',
    muted: 'var(--bgColor-neutral-muted)',
    subtle: 'var(--bgColor-neutral-muted)',
  },
  accent: {
    fg: 'var(--fgColor-accent)',
    emphasis: 'var(--bgColor-accent-emphasis)',
    muted: 'var(--borderColor-accent-muted)',
    subtle: 'var(--bgColor-accent-muted)',
  },
  success: {
    fg: 'var(--fgColor-success)',
    emphasis: 'var(--bgColor-success-emphasis)',
    muted: 'var(--borderColor-success-muted)',
    subtle: 'var(--bgColor-success-muted)',
  },
  attention: {
    fg: 'var(--fgColor-attention)',
    emphasis: 'var(--bgColor-attention-emphasis)',
    muted: 'var(--borderColor-attention-muted)',
    subtle: 'var(--bgColor-attention-muted)',
  },
  severe: {
    fg: 'var(--fgColor-severe)',
    emphasis: 'var(--bgColor-severe-emphasis)',
    muted: 'var(--borderColor-severe-muted)',
    subtle: 'var(--bgColor-severe-muted)',
  },
  danger: {
    fg: 'var(--fgColor-danger)',
    emphasis: 'var(--borderColor-danger-emphasis)',
    muted: 'var(--borderColor-danger-muted)',
    subtle: 'var(--bgColor-danger-muted)',
  },
  open: {
    fg: 'var(--fgColor-open)',
    emphasis: 'var(--bgColor-open-emphasis)',
    muted: 'var(--borderColor-open-muted)',
    subtle: 'var(--bgColor-open-muted)',
  },
  closed: {
    fg: 'var(--fgColor-closed)',
    emphasis: 'var(--bgColor-closed-emphasis)',
    muted: 'var(--borderColor-closed-muted)',
    subtle: 'var(--bgColor-closed-muted)',
  },
  done: {
    fg: 'var(--fgColor-done)',
    emphasis: 'var(--bgColor-done-emphasis)',
    muted: 'var(--borderColor-done-muted)',
    subtle: 'var(--bgColor-done-muted)',
  },
  sponsors: {
    fg: 'var(--fgColor-sponsors)',
    emphasis: 'var(--bgColor-sponsors-emphasis)',
    muted: 'var(--borderColor-sponsors-muted)',
    subtle: 'var(--bgColor-sponsors-muted)',
  },
  primer: {
    fg: {disabled: 'var(--fgColor-disabled)'},
    canvas: {
      backdrop: 'var(--overlay-backdrop-bgColor)',
      sticky: 'var(--color-primer-canvas-sticky)',
    },
    border: {
      active: 'var(--underlineNav-borderColor-active)',
      contrast: 'var(--borderColor-muted)',
    },
    shadow: {
      highlight: 'var(--shadow-highlight)',
      inset: 'var(--shadow-inset)',
    },
  },
  scale: {
    black: '#1F2328)',
    white: '#ffffff)',
    gray: [
      '#f6f8fa)',
      '#eaeef2)',
      '#d0d7de)',
      '#afb8c1)',
      '#8c959f)',
      '#6e7781)',
      '#57606a)',
      '#424a53)',
      '#32383f)',
      '#24292f)',
    ],
    blue: [
      '#ddf4ff)',
      '#b6e3ff)',
      '#80ccff)',
      '#54aeff)',
      '#218bff)',
      '#0969da)',
      '#0550ae)',
      '#033d8b)',
      '#0a3069)',
      '#002155)',
    ],
    green: [
      '#dafbe1)',
      '#aceebb)',
      '#6fdd8b)',
      '#4ac26b)',
      '#2da44e)',
      '#1a7f37)',
      '#116329)',
      '#044f1e)',
      '#003d16)',
      '#002d11)',
    ],
    yellow: [
      '#fff8c5)',
      '#fae17d)',
      '#eac54f)',
      '#d4a72c)',
      '#bf8700)',
      '#9a6700)',
      '#7d4e00)',
      '#633c01)',
      '#4d2d00)',
      '#3b2300)',
    ],
    orange: [
      '#fff1e5)',
      '#ffd8b5)',
      '#ffb77c)',
      '#fb8f44)',
      '#e16f24)',
      '#bc4c00)',
      '#953800)',
      '#762c00)',
      '#5c2200)',
      '#471700)',
    ],
    red: [
      '#ffebe9)',
      '#ffcecb)',
      '#ffaba8)',
      '#ff8182)',
      '#fa4549)',
      '#cf222e)',
      '#a40e26)',
      '#82071e)',
      '#660018)',
      '#4c0014)',
    ],
    purple: [
      '#fbefff)',
      '#ecd8ff)',
      '#d8b9ff)',
      '#c297ff)',
      '#a475f9)',
      '#8250df)',
      '#6639ba)',
      '#512a97)',
      '#3e1f79)',
      '#2e1461)',
    ],
    pink: [
      '#ffeff7)',
      '#ffd3eb)',
      '#ffadda)',
      '#ff80c8)',
      '#e85aad)',
      '#bf3989)',
      '#99286e)',
      '#772057)',
      '#611347)',
      '#4d0336)',
    ],
    coral: [
      '#fff0eb)',
      '#ffd6cc)',
      '#ffb4a1)',
      '#fd8c73)',
      '#ec6547)',
      '#c4432b)',
      '#9e2f1c)',
      '#801f0f)',
      '#691105)',
      '#510901)',
    ],
  },
} as const

export default colors
