export default {
  "undefined": {
    "content": "import {theme} from '../../..'\n\n# Primer Theme\n\nPrimer Components come with built-in access to our Primer theme. The [theme file](https://github.com/primer/components/blob/master/src/theme.js) contains an object which holds values\nfor common variables such as color, fonts, box shadows, and more. Our theme file pulls many of its color and typography values from [primer-primitives](https://github.com/primer/primer-primitives).\n\nMany of our theme keys correspond to system props on our components. For example, if you'd like to set the max width on a `<Box>` set the `maxWidth` prop to `medium`:\n`<Box maxWidth='medium'>`\n\nIn the background, [styled-system](https://github.com/jxnblk/styled-system) does the work of finding the `medium` value from `maxWidth` key in the theme file and applying the corresponding CSS.\n\nOur full theme is as follows:\n\n<pre>{JSON.stringify(theme, null, '  ')}</pre>\n\n\n### Custom Theming\nCustom theming is an optional way to override the Primer values that control color, spacing, typography, and other aspects of our components.\n\nThere are two ways to change the theme of Primer components:\n\n1. You can override the entire theme for an entire tree of components using the `<ThemeProvider>` from [styled-components]:\n\n    ```jsx\n    import {Block, Button, Text, theme as primer} from '@primer/components'\n    import {ThemeProvider} from 'styled-components'\n\n    // a theme with custom spacing and font sizes\n    const theme = {\n      ...primer,\n      space: [0, 8, 16, 32, 64],\n      fontSizes: [10, 12, 16, 24, 48]\n    }\n\n    // override\n    theme.colors.bodytext = '#111'\n\n    export default () => (\n      <ThemeProvider theme={theme}>\n        <Block color='bodytext' p={4}>\n          <Text fontSize={4}>Hello, world!</Text>\n        </Block>\n      </ThemeProvider>\n    )\n    ```\n\n    **⚠️ Note: [styled-components]'s `<ThemeProvider>` only allows exactly one child.**\n2. You can merge the Primer theme with your custom theme using Object.assign:\n\n```jsx\nimport {ThemeProvider} from `styled-components`\nimport {theme} from '@primer/components'\n\nconst customTheme = { ... }\n\n\nconst App = (props) => {\n  return (\n    <div>\n      <ThemeProvider theme={Object.assign({}, theme, customTheme)}> // matching keys in customTheme will override keys in the Primer theme\n        <div>your app here</div>\n      </ThemeProvider>\n    </div>\n  )\n}\n```\n\n3. You can theme individual components by passing the `theme` prop directly:\n\n    ```jsx\n    import {Text} from '@primer/components'\n\n    const theme = {\n      colors: {\n        magenta: '#f0f'\n      }\n    }\n\n    export default () => (\n      <Text theme={theme} color='magenta'>Hi, I'm magenta!</Text>\n    )\n    ```\n\n    **☝️ This is an intentionally convoluted example, since you can use `<Text color='#f0f'>` out of the box.**\n\n\nRead the [styled-system docs](https://styled-system.com/#theming) for more information on theming in styled-system.\n\n[styled-components]: https://styled-components.com/\n"
  }
}